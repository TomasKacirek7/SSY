
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800200  0000244a  000024de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000244a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001817  008002ce  008002ce  000025ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00002648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006504  00000000  00000000  00002a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d8e  00000000  00000000  00008f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000277b  00000000  00000000  0000bd0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab0  00000000  00000000  0000e488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002027  00000000  00000000  0000ef38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000295f  00000000  00000000  00010f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b0  00000000  00000000  000138be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	c2 c2       	rjmp	.+1412   	; 0x5ba <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c3       	rjmp	.+1730   	; 0x754 <__vector_36>
      92:	00 00       	nop
      94:	43 c3       	rjmp	.+1670   	; 0x71c <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	77 c2       	rjmp	.+1262   	; 0x598 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	ea e4       	ldi	r30, 0x4A	; 74
     14c:	f4 e2       	ldi	r31, 0x24	; 36
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	ae 3c       	cpi	r26, 0xCE	; 206
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2a e1       	ldi	r18, 0x1A	; 26
     160:	ae ec       	ldi	r26, 0xCE	; 206
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a5 3e       	cpi	r26, 0xE5	; 229
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	33 d1       	rcall	.+614    	; 0x3d6 <main>
     170:	0c 94 23 12 	jmp	0x2446	; 0x2446 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
appDataReqBusy = false;
     176:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <appDataReqBusy>
     17a:	08 95       	ret

0000017c <appDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	if (ind->size >= 1)
     17c:	fc 01       	movw	r30, r24
     17e:	21 85       	ldd	r18, Z+9	; 0x09
     180:	22 23       	and	r18, r18
     182:	e9 f0       	breq	.+58     	; 0x1be <appDataInd+0x42>
	{
		received_public_B = ind->data[0] - 'a'; // Prevod z ASCII na cislo
     184:	07 80       	ldd	r0, Z+7	; 0x07
     186:	f0 85       	ldd	r31, Z+8	; 0x08
     188:	e0 2d       	mov	r30, r0
     18a:	80 81       	ld	r24, Z
     18c:	81 56       	subi	r24, 0x61	; 97
     18e:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <received_public_B>
		printf("Prijat verejny klic Boba: %u ('%c')\n\r", received_public_B, ind->data[0]);
     192:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <received_public_B>
     196:	90 81       	ld	r25, Z
     198:	1f 92       	push	r1
     19a:	9f 93       	push	r25
     19c:	1f 92       	push	r1
     19e:	8f 93       	push	r24
     1a0:	85 e1       	ldi	r24, 0x15	; 21
     1a2:	92 e0       	ldi	r25, 0x02	; 2
     1a4:	9f 93       	push	r25
     1a6:	8f 93       	push	r24
     1a8:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <printf>
		appState = APP_STATE_CALCULATE_SHARED_SECRET; // Presun do stavu vypoctu sdileneho klice
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <appState>
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
	}
	return true;
}
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	08 95       	ret

000001c2 <appSendData>:


/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
     1c2:	cf 93       	push	r28
if (appDataReqBusy || 0 == appUartBufferPtr)
     1c4:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <appDataReqBusy>
     1c8:	81 11       	cpse	r24, r1
     1ca:	29 c0       	rjmp	.+82     	; 0x21e <appSendData+0x5c>
     1cc:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <appUartBufferPtr>
     1d0:	88 23       	and	r24, r24
     1d2:	29 f1       	breq	.+74     	; 0x21e <appSendData+0x5c>
return;

memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
     1d4:	40 91 d3 02 	lds	r20, 0x02D3	; 0x8002d3 <appUartBufferPtr>
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	64 ed       	ldi	r22, 0xD4	; 212
     1dc:	72 e0       	ldi	r23, 0x02	; 2
     1de:	81 e4       	ldi	r24, 0x41	; 65
     1e0:	93 e0       	ldi	r25, 0x03	; 3
     1e2:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <memcpy>

appDataReq.dstAddr = 1-APP_ADDR;
     1e6:	ef ea       	ldi	r30, 0xAF	; 175
     1e8:	f3 e0       	ldi	r31, 0x03	; 3
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	96 83       	std	Z+6, r25	; 0x06
     1f0:	85 83       	std	Z+5, r24	; 0x05
appDataReq.dstEndpoint = APP_ENDPOINT;
     1f2:	c1 e0       	ldi	r28, 0x01	; 1
     1f4:	c7 83       	std	Z+7, r28	; 0x07
appDataReq.srcEndpoint = APP_ENDPOINT;
     1f6:	c0 87       	std	Z+8, r28	; 0x08
appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	81 87       	std	Z+9, r24	; 0x09
appDataReq.data = appDataReqBuffer;
     1fc:	81 e4       	ldi	r24, 0x41	; 65
     1fe:	93 e0       	ldi	r25, 0x03	; 3
     200:	93 87       	std	Z+11, r25	; 0x0b
     202:	82 87       	std	Z+10, r24	; 0x0a
appDataReq.size = appUartBufferPtr;
     204:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <appUartBufferPtr>
     208:	84 87       	std	Z+12, r24	; 0x0c
appDataReq.confirm = appDataConf;
     20a:	8b eb       	ldi	r24, 0xBB	; 187
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	96 87       	std	Z+14, r25	; 0x0e
     210:	85 87       	std	Z+13, r24	; 0x0d
NWK_DataReq(&appDataReq);
     212:	cf 01       	movw	r24, r30
     214:	93 d3       	rcall	.+1830   	; 0x93c <NWK_DataReq>

appUartBufferPtr = 0;
     216:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <appUartBufferPtr>
appDataReqBusy = true;
     21a:	c0 93 ae 03 	sts	0x03AE, r28	; 0x8003ae <appDataReqBusy>
}
     21e:	cf 91       	pop	r28
     220:	08 95       	ret

00000222 <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
appSendData();
     222:	cf cf       	rjmp	.-98     	; 0x1c2 <appSendData>
     224:	08 95       	ret

00000226 <uart_putchar>:
}
}

/*************************************************************************//**
*****************************************************************************/
static int uart_putchar(char c, FILE *stream) {
     226:	cf 93       	push	r28
     228:	c8 2f       	mov	r28, r24
	if (c == '\n') {
     22a:	8a 30       	cpi	r24, 0x0A	; 10
     22c:	11 f4       	brne	.+4      	; 0x232 <uart_putchar+0xc>
		HAL_UartWriteByte('\r');
     22e:	8d e0       	ldi	r24, 0x0D	; 13
     230:	28 d2       	rcall	.+1104   	; 0x682 <HAL_UartWriteByte>
	}
	HAL_UartWriteByte(c);
     232:	8c 2f       	mov	r24, r28
     234:	26 d2       	rcall	.+1100   	; 0x682 <HAL_UartWriteByte>
	return 0;
}
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <HAL_UartBytesReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
     23e:	df 92       	push	r13
     240:	ef 92       	push	r14
     242:	ff 92       	push	r15
     244:	0f 93       	push	r16
     246:	1f 93       	push	r17
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	8c 01       	movw	r16, r24
	for (uint16_t i = 0; i < bytes; i++)
     24e:	89 2b       	or	r24, r25
     250:	79 f1       	breq	.+94     	; 0x2b0 <HAL_UartBytesReceived+0x72>
     252:	c0 e0       	ldi	r28, 0x00	; 0
     254:	d0 e0       	ldi	r29, 0x00	; 0
		if (appUartBufferPtr < sizeof(appUartBuffer))
		{
			appUartBuffer[appUartBufferPtr++] = byte;

			// Vypis prijateho znaku a jeho ciselne hodnoty
			printf("Prijaty znak: '%c' (hodnota: %u)\n\r", byte, byte);
     256:	0f 2e       	mov	r0, r31
     258:	fb e3       	ldi	r31, 0x3B	; 59
     25a:	ef 2e       	mov	r14, r31
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	ff 2e       	mov	r15, r31
     260:	f0 2d       	mov	r31, r0
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
	for (uint16_t i = 0; i < bytes; i++)
	{
		uint8_t byte = HAL_UartReadByte();
     262:	36 d2       	rcall	.+1132   	; 0x6d0 <HAL_UartReadByte>
     264:	d8 2e       	mov	r13, r24

		if (appUartBufferPtr == sizeof(appUartBuffer))
     266:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <appUartBufferPtr>
     26a:	8d 36       	cpi	r24, 0x6D	; 109
		appSendData();
     26c:	09 f4       	brne	.+2      	; 0x270 <HAL_UartBytesReceived+0x32>
     26e:	a9 df       	rcall	.-174    	; 0x1c2 <appSendData>

		if (appUartBufferPtr < sizeof(appUartBuffer))
     270:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <appUartBufferPtr>
     274:	8d 36       	cpi	r24, 0x6D	; 109
     276:	c0 f4       	brcc	.+48     	; 0x2a8 <HAL_UartBytesReceived+0x6a>
		{
			appUartBuffer[appUartBufferPtr++] = byte;
     278:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <appUartBufferPtr>
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	8e 0f       	add	r24, r30
     280:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <appUartBufferPtr>
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	ec 52       	subi	r30, 0x2C	; 44
     288:	fd 4f       	sbci	r31, 0xFD	; 253
     28a:	d0 82       	st	Z, r13

			// Vypis prijateho znaku a jeho ciselne hodnoty
			printf("Prijaty znak: '%c' (hodnota: %u)\n\r", byte, byte);
     28c:	1f 92       	push	r1
     28e:	df 92       	push	r13
     290:	1f 92       	push	r1
     292:	df 92       	push	r13
     294:	ff 92       	push	r15
     296:	ef 92       	push	r14
     298:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <printf>
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
	for (uint16_t i = 0; i < bytes; i++)
     2a8:	21 96       	adiw	r28, 0x01	; 1
     2aa:	0c 17       	cp	r16, r28
     2ac:	1d 07       	cpc	r17, r29
     2ae:	c9 f6       	brne	.-78     	; 0x262 <HAL_UartBytesReceived+0x24>
			// Vypis prijateho znaku a jeho ciselne hodnoty
			printf("Prijaty znak: '%c' (hodnota: %u)\n\r", byte, byte);
		}
	}

	SYS_TimerStop(&appTimer);
     2b0:	80 ec       	ldi	r24, 0xC0	; 192
     2b2:	93 e0       	ldi	r25, 0x03	; 3
     2b4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <SYS_TimerStop>
	SYS_TimerStart(&appTimer);
     2b8:	80 ec       	ldi	r24, 0xC0	; 192
     2ba:	93 e0       	ldi	r25, 0x03	; 3
     2bc:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <SYS_TimerStart>
}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	08 95       	ret

000002d0 <mod_exp>:
	}
}

/*************************************************************************//**
 *****************************************************************************/
uint32_t mod_exp(uint32_t base, uint32_t exp, uint32_t mod) {
     2d0:	4f 92       	push	r4
     2d2:	5f 92       	push	r5
     2d4:	6f 92       	push	r6
     2d6:	7f 92       	push	r7
     2d8:	8f 92       	push	r8
     2da:	9f 92       	push	r9
     2dc:	af 92       	push	r10
     2de:	bf 92       	push	r11
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	00 d0       	rcall	.+0      	; 0x2ee <mod_exp+0x1e>
     2ee:	1f 92       	push	r1
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	49 01       	movw	r8, r18
     2f6:	5a 01       	movw	r10, r20
	uint32_t res = 1;
	base = base % mod;
     2f8:	a8 01       	movw	r20, r16
     2fa:	97 01       	movw	r18, r14
     2fc:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__udivmodsi4>
     300:	2b 01       	movw	r4, r22
     302:	3c 01       	movw	r6, r24
	while (exp > 0) {
     304:	81 14       	cp	r8, r1
     306:	91 04       	cpc	r9, r1
     308:	a1 04       	cpc	r10, r1
     30a:	b1 04       	cpc	r11, r1
     30c:	81 f1       	breq	.+96     	; 0x36e <mod_exp+0x9e>
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	a0 e0       	ldi	r26, 0x00	; 0
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	89 83       	std	Y+1, r24	; 0x01
     318:	9a 83       	std	Y+2, r25	; 0x02
     31a:	ab 83       	std	Y+3, r26	; 0x03
     31c:	bc 83       	std	Y+4, r27	; 0x04
		if (exp % 2 == 1) res = (res * base) % mod;
     31e:	80 fe       	sbrs	r8, 0
     320:	10 c0       	rjmp	.+32     	; 0x342 <mod_exp+0x72>
     322:	a3 01       	movw	r20, r6
     324:	92 01       	movw	r18, r4
     326:	69 81       	ldd	r22, Y+1	; 0x01
     328:	7a 81       	ldd	r23, Y+2	; 0x02
     32a:	8b 81       	ldd	r24, Y+3	; 0x03
     32c:	9c 81       	ldd	r25, Y+4	; 0x04
     32e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__mulsi3>
     332:	a8 01       	movw	r20, r16
     334:	97 01       	movw	r18, r14
     336:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__udivmodsi4>
     33a:	69 83       	std	Y+1, r22	; 0x01
     33c:	7a 83       	std	Y+2, r23	; 0x02
     33e:	8b 83       	std	Y+3, r24	; 0x03
     340:	9c 83       	std	Y+4, r25	; 0x04
		base = (base * base) % mod;
     342:	a3 01       	movw	r20, r6
     344:	92 01       	movw	r18, r4
     346:	c3 01       	movw	r24, r6
     348:	b2 01       	movw	r22, r4
     34a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__mulsi3>
     34e:	a8 01       	movw	r20, r16
     350:	97 01       	movw	r18, r14
     352:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__udivmodsi4>
     356:	2b 01       	movw	r4, r22
     358:	3c 01       	movw	r6, r24
		exp /= 2;
     35a:	b6 94       	lsr	r11
     35c:	a7 94       	ror	r10
     35e:	97 94       	ror	r9
     360:	87 94       	ror	r8
/*************************************************************************//**
 *****************************************************************************/
uint32_t mod_exp(uint32_t base, uint32_t exp, uint32_t mod) {
	uint32_t res = 1;
	base = base % mod;
	while (exp > 0) {
     362:	81 14       	cp	r8, r1
     364:	91 04       	cpc	r9, r1
     366:	a1 04       	cpc	r10, r1
     368:	b1 04       	cpc	r11, r1
     36a:	c9 f6       	brne	.-78     	; 0x31e <mod_exp+0x4e>
     36c:	08 c0       	rjmp	.+16     	; 0x37e <mod_exp+0xae>
}

/*************************************************************************//**
 *****************************************************************************/
uint32_t mod_exp(uint32_t base, uint32_t exp, uint32_t mod) {
	uint32_t res = 1;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	a0 e0       	ldi	r26, 0x00	; 0
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	89 83       	std	Y+1, r24	; 0x01
     378:	9a 83       	std	Y+2, r25	; 0x02
     37a:	ab 83       	std	Y+3, r26	; 0x03
     37c:	bc 83       	std	Y+4, r27	; 0x04
		if (exp % 2 == 1) res = (res * base) % mod;
		base = (base * base) % mod;
		exp /= 2;
	}
	return res;
}
     37e:	69 81       	ldd	r22, Y+1	; 0x01
     380:	7a 81       	ldd	r23, Y+2	; 0x02
     382:	8b 81       	ldd	r24, Y+3	; 0x03
     384:	9c 81       	ldd	r25, Y+4	; 0x04
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	bf 90       	pop	r11
     39c:	af 90       	pop	r10
     39e:	9f 90       	pop	r9
     3a0:	8f 90       	pop	r8
     3a2:	7f 90       	pop	r7
     3a4:	6f 90       	pop	r6
     3a6:	5f 90       	pop	r5
     3a8:	4f 90       	pop	r4
     3aa:	08 95       	ret

000003ac <print_result>:

/*************************************************************************//**
 *****************************************************************************/
void print_result(const char* label, uint32_t value) {
	printf("%s %lu\n\r", label, value);
     3ac:	7f 93       	push	r23
     3ae:	6f 93       	push	r22
     3b0:	5f 93       	push	r21
     3b2:	4f 93       	push	r20
     3b4:	9f 93       	push	r25
     3b6:	8f 93       	push	r24
     3b8:	8e e5       	ldi	r24, 0x5E	; 94
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	9f 93       	push	r25
     3be:	8f 93       	push	r24
     3c0:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <printf>
     3c4:	8d b7       	in	r24, 0x3d	; 61
     3c6:	9e b7       	in	r25, 0x3e	; 62
     3c8:	08 96       	adiw	r24, 0x08	; 8
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	9e bf       	out	0x3e, r25	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	8d bf       	out	0x3d, r24	; 61
     3d4:	08 95       	ret

000003d6 <main>:
/*************************************************************************//**
*****************************************************************************/
int main(void)
{
	// Presmerovani standardniho vystupu printf na UART
	stdout = &uart_str;
     3d6:	84 e0       	ldi	r24, 0x04	; 4
     3d8:	92 e0       	ldi	r25, 0x02	; 2
     3da:	90 93 e2 1a 	sts	0x1AE2, r25	; 0x801ae2 <__iob+0x3>
     3de:	80 93 e1 1a 	sts	0x1AE1, r24	; 0x801ae1 <__iob+0x2>

	// Uvodni text pro Alici
	printf("Diffie-Hellman Exchange - Alice\n\r");
     3e2:	87 e6       	ldi	r24, 0x67	; 103
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	9f 93       	push	r25
     3e8:	8f 93       	push	r24
     3ea:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <printf>
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	88 e8       	ldi	r24, 0x88	; 136
     3f4:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3f6:	28 ec       	ldi	r18, 0xC8	; 200
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	f9 01       	movw	r30, r18
     3fc:	31 97       	sbiw	r30, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <main+0x26>
     400:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     402:	d9 f7       	brne	.-10     	; 0x3fa <main+0x24>
	_delay_ms(500);
	SYS_Init();
     404:	0e 94 57 0d 	call	0x1aae	; 0x1aae <SYS_Init>
	HAL_UartInit(38400);
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	76 e9       	ldi	r23, 0x96	; 150
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	e3 d0       	rcall	.+454    	; 0x5d8 <HAL_UartInit>
} break;

case APP_STATE_SEND_PUBLIC_KEY:
{
	uint8_t char_public_A = public_A + 'a';
	appUartBuffer[0] = char_public_A;
     412:	0f 2e       	mov	r0, r31
     414:	f4 ed       	ldi	r31, 0xD4	; 212
     416:	8f 2e       	mov	r8, r31
     418:	f2 e0       	ldi	r31, 0x02	; 2
     41a:	9f 2e       	mov	r9, r31
     41c:	f0 2d       	mov	r31, r0
	appUartBufferPtr = 1;
     41e:	33 24       	eor	r3, r3
     420:	33 94       	inc	r3
	appSendData();
	printf("Odeslan verejny klic Alice: %u ('%c')\n\r", public_A, char_public_A);
     422:	0f 2e       	mov	r0, r31
     424:	f9 e8       	ldi	r31, 0x89	; 137
     426:	cf 2e       	mov	r12, r31
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	df 2e       	mov	r13, r31
     42c:	f0 2d       	mov	r31, r0
	appState = APP_STATE_WAIT_PUBLIC_KEY;
     42e:	68 94       	set
     430:	22 24       	eor	r2, r2
     432:	21 f8       	bld	r2, 1

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     434:	c0 ec       	ldi	r28, 0xC0	; 192
     436:	d3 e0       	ldi	r29, 0x03	; 3
     438:	0f 2e       	mov	r0, r31
     43a:	f4 e1       	ldi	r31, 0x14	; 20
     43c:	4f 2e       	mov	r4, r31
     43e:	51 2c       	mov	r5, r1
     440:	61 2c       	mov	r6, r1
     442:	71 2c       	mov	r7, r1
     444:	f0 2d       	mov	r31, r0
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
appTimer.handler = appTimerHandler;
     446:	0f 2e       	mov	r0, r31
     448:	f1 e1       	ldi	r31, 0x11	; 17
     44a:	af 2e       	mov	r10, r31
     44c:	f1 e0       	ldi	r31, 0x01	; 1
     44e:	bf 2e       	mov	r11, r31
     450:	f0 2d       	mov	r31, r0
	SYS_Init();
	HAL_UartInit(38400);

	while (1)
	{
		SYS_TaskHandler();
     452:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <SYS_TaskHandler>
		HAL_UartTaskHandler();
     456:	d5 d1       	rcall	.+938    	; 0x802 <HAL_UartTaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
switch (appState)
     458:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <appState>
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	89 f1       	breq	.+98     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     460:	20 f0       	brcs	.+8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     462:	83 30       	cpi	r24, 0x03	; 3
     464:	09 f4       	brne	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     466:	48 c0       	rjmp	.+144    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     468:	f4 cf       	rjmp	.-24     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
NWK_SetAddr(APP_ADDR);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	23 d2       	rcall	.+1094   	; 0x8b6 <NWK_SetAddr>
NWK_SetPanId(APP_PANID);
     470:	80 e8       	ldi	r24, 0x80	; 128
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	27 d2       	rcall	.+1102   	; 0x8c4 <NWK_SetPanId>
     476:	8f e0       	ldi	r24, 0x0F	; 15
PHY_SetChannel(APP_CHANNEL);
     478:	0e 94 86 0c 	call	0x190c	; 0x190c <PHY_SetChannel>
     47c:	83 2d       	mov	r24, r3
#ifdef PHY_AT86RF212
PHY_SetBand(APP_BAND);
PHY_SetModulation(APP_MODULATION);
#endif
PHY_SetRxState(true);
     47e:	0e 94 82 0c 	call	0x1904	; 0x1904 <PHY_SetRxState>

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     482:	6e eb       	ldi	r22, 0xBE	; 190
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	83 2d       	mov	r24, r3
     488:	24 d2       	rcall	.+1096   	; 0x8d2 <NWK_OpenEndpoint>
     48a:	4e 82       	std	Y+6, r4	; 0x06

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     48c:	5f 82       	std	Y+7, r5	; 0x07
     48e:	68 86       	std	Y+8, r6	; 0x08
     490:	79 86       	std	Y+9, r7	; 0x09
     492:	1a 86       	std	Y+10, r1	; 0x0a
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
     494:	bc 86       	std	Y+12, r11	; 0x0c
appTimer.handler = appTimerHandler;
     496:	ab 86       	std	Y+11, r10	; 0x0b
     498:	e0 90 14 02 	lds	r14, 0x0214	; 0x800214 <P>

public_A = mod_exp(G, secret_a, P);
     49c:	f1 2c       	mov	r15, r1
     49e:	00 e0       	ldi	r16, 0x00	; 0
     4a0:	10 e0       	ldi	r17, 0x00	; 0
     4a2:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <secret_a>
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <G>
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0c df       	rcall	.-488    	; 0x2d0 <mod_exp>
     4b8:	60 93 b5 1a 	sts	0x1AB5, r22	; 0x801ab5 <public_A>
     4bc:	30 92 cd 03 	sts	0x03CD, r3	; 0x8003cd <appState>
switch (appState)
{
case APP_STATE_INITIAL:
{
appInit();
appState = APP_STATE_SEND_PUBLIC_KEY;
     4c0:	c8 cf       	rjmp	.-112    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     4c2:	10 91 b5 1a 	lds	r17, 0x1AB5	; 0x801ab5 <public_A>
} break;

case APP_STATE_SEND_PUBLIC_KEY:
{
	uint8_t char_public_A = public_A + 'a';
     4c6:	1f 59       	subi	r17, 0x9F	; 159
	appUartBuffer[0] = char_public_A;
     4c8:	f4 01       	movw	r30, r8
     4ca:	10 83       	st	Z, r17
	appUartBufferPtr = 1;
     4cc:	30 92 d3 02 	sts	0x02D3, r3	; 0x8002d3 <appUartBufferPtr>
	appSendData();
     4d0:	78 de       	rcall	.-784    	; 0x1c2 <appSendData>
     4d2:	1f 92       	push	r1
	printf("Odeslan verejny klic Alice: %u ('%c')\n\r", public_A, char_public_A);
     4d4:	1f 93       	push	r17
     4d6:	80 91 b5 1a 	lds	r24, 0x1AB5	; 0x801ab5 <public_A>
     4da:	1f 92       	push	r1
     4dc:	8f 93       	push	r24
     4de:	df 92       	push	r13
     4e0:	cf 92       	push	r12
     4e2:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <printf>
     4e6:	20 92 cd 03 	sts	0x03CD, r2	; 0x8003cd <appState>
	appState = APP_STATE_WAIT_PUBLIC_KEY;
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	ad cf       	rjmp	.-166    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     4f8:	60 91 d2 02 	lds	r22, 0x02D2	; 0x8002d2 <received_public_B>
	// Cekame na prijeti verejneho klice od Boba (udelano v appDataInd)
	break;

case APP_STATE_CALCULATE_SHARED_SECRET:
{
	shared_secret_a = mod_exp(received_public_B, secret_a, P);
     4fc:	e0 90 14 02 	lds	r14, 0x0214	; 0x800214 <P>
     500:	f1 2c       	mov	r15, r1
     502:	00 e0       	ldi	r16, 0x00	; 0
     504:	10 e0       	ldi	r17, 0x00	; 0
     506:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <secret_a>
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	dc de       	rcall	.-584    	; 0x2d0 <mod_exp>
     518:	60 93 ce 02 	sts	0x02CE, r22	; 0x8002ce <__data_end>
     51c:	70 93 cf 02 	sts	0x02CF, r23	; 0x8002cf <__data_end+0x1>
     520:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <__data_end+0x2>
     524:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <__data_end+0x3>
     528:	40 91 ce 02 	lds	r20, 0x02CE	; 0x8002ce <__data_end>
	print_result("Spojeny tajny klic (Alice):", shared_secret_a);
     52c:	50 91 cf 02 	lds	r21, 0x02CF	; 0x8002cf <__data_end+0x1>
     530:	60 91 d0 02 	lds	r22, 0x02D0	; 0x8002d0 <__data_end+0x2>
     534:	70 91 d1 02 	lds	r23, 0x02D1	; 0x8002d1 <__data_end+0x3>
     538:	81 eb       	ldi	r24, 0xB1	; 177
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	37 df       	rcall	.-402    	; 0x3ac <print_result>
     53e:	f4 e0       	ldi	r31, 0x04	; 4
	appState = APP_STATE_IDLE;
     540:	f0 93 cd 03 	sts	0x03CD, r31	; 0x8003cd <appState>
     544:	86 cf       	rjmp	.-244    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>

00000546 <HAL_Init>:
     546:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	a8 95       	wdr
     54e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     552:	88 61       	ori	r24, 0x18	; 24
     554:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     558:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	e1 e6       	ldi	r30, 0x61	; 97
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	80 e8       	ldi	r24, 0x80	; 128
     564:	80 83       	st	Z, r24
     566:	10 82       	st	Z, r1
     568:	78 94       	sei
     56a:	01 c0       	rjmp	.+2      	; 0x56e <HAL_TimerInit>
     56c:	08 95       	ret

0000056e <HAL_TimerInit>:
     56e:	10 92 b6 1a 	sts	0x1AB6, r1	; 0x801ab6 <halTimerIrqCount>
     572:	80 e1       	ldi	r24, 0x10	; 16
     574:	97 e2       	ldi	r25, 0x27	; 39
     576:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     57a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     57e:	e1 ea       	ldi	r30, 0xA1	; 161
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	88 e0       	ldi	r24, 0x08	; 8
     584:	80 83       	st	Z, r24
     586:	80 81       	ld	r24, Z
     588:	82 60       	ori	r24, 0x02	; 2
     58a:	80 83       	st	Z, r24
     58c:	e2 e7       	ldi	r30, 0x72	; 114
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	80 81       	ld	r24, Z
     592:	82 60       	ori	r24, 0x02	; 2
     594:	80 83       	st	Z, r24
     596:	08 95       	ret

00000598 <__vector_42>:
     598:	1f 92       	push	r1
     59a:	0f 92       	push	r0
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	0f 92       	push	r0
     5a0:	11 24       	eor	r1, r1
     5a2:	8f 93       	push	r24
     5a4:	80 91 b6 1a 	lds	r24, 0x1AB6	; 0x801ab6 <halTimerIrqCount>
     5a8:	8f 5f       	subi	r24, 0xFF	; 255
     5aa:	80 93 b6 1a 	sts	0x1AB6, r24	; 0x801ab6 <halTimerIrqCount>
     5ae:	8f 91       	pop	r24
     5b0:	0f 90       	pop	r0
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	0f 90       	pop	r0
     5b6:	1f 90       	pop	r1
     5b8:	18 95       	reti

000005ba <__vector_13>:
     5ba:	1f 92       	push	r1
     5bc:	0f 92       	push	r0
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	0f 92       	push	r0
     5c2:	11 24       	eor	r1, r1
     5c4:	8f 93       	push	r24
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <halSleepTimerEvent>
     5cc:	8f 91       	pop	r24
     5ce:	0f 90       	pop	r0
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	0f 90       	pop	r0
     5d4:	1f 90       	pop	r1
     5d6:	18 95       	reti

000005d8 <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     5d8:	dc 01       	movw	r26, r24
     5da:	cb 01       	movw	r24, r22
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	aa 1f       	adc	r26, r26
     5e2:	bb 1f       	adc	r27, r27
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	aa 1f       	adc	r26, r26
     5ea:	bb 1f       	adc	r27, r27
     5ec:	9c 01       	movw	r18, r24
     5ee:	ad 01       	movw	r20, r26
     5f0:	22 0f       	add	r18, r18
     5f2:	33 1f       	adc	r19, r19
     5f4:	44 1f       	adc	r20, r20
     5f6:	55 1f       	adc	r21, r21
     5f8:	22 0f       	add	r18, r18
     5fa:	33 1f       	adc	r19, r19
     5fc:	44 1f       	adc	r20, r20
     5fe:	55 1f       	adc	r21, r21
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	74 e2       	ldi	r23, 0x24	; 36
     604:	84 ef       	ldi	r24, 0xF4	; 244
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__udivmodsi4>
     60c:	ba 01       	movw	r22, r20
     60e:	a9 01       	movw	r20, r18
     610:	41 50       	subi	r20, 0x01	; 1
     612:	51 09       	sbc	r21, r1
     614:	61 09       	sbc	r22, r1
     616:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
     618:	bb 27       	eor	r27, r27
     61a:	a7 2f       	mov	r26, r23
     61c:	96 2f       	mov	r25, r22
     61e:	85 2f       	mov	r24, r21
     620:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
  UBRRxL = (brr & 0xff);
     624:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
  UCSRxA = (1 << U2X1);
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     62e:	88 e9       	ldi	r24, 0x98	; 152
     630:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
  UCSRxC = (3 << UCSZ10);
     634:	86 e0       	ldi	r24, 0x06	; 6
     636:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>

  txFifo.data = txData;
     63a:	ed ef       	ldi	r30, 0xFD	; 253
     63c:	f6 e0       	ldi	r31, 0x06	; 6
     63e:	8c e6       	ldi	r24, 0x6C	; 108
     640:	95 e0       	ldi	r25, 0x05	; 5
     642:	91 87       	std	Z+9, r25	; 0x09
     644:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     646:	80 e9       	ldi	r24, 0x90	; 144
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	95 83       	std	Z+5, r25	; 0x05
     64c:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
     64e:	17 82       	std	Z+7, r1	; 0x07
     650:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
     652:	11 82       	std	Z+1, r1	; 0x01
     654:	10 82       	st	Z, r1
  txFifo.tail = 0;
     656:	13 82       	std	Z+3, r1	; 0x03
     658:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
     65a:	e2 e6       	ldi	r30, 0x62	; 98
     65c:	f5 e0       	ldi	r31, 0x05	; 5
     65e:	21 ed       	ldi	r18, 0xD1	; 209
     660:	33 e0       	ldi	r19, 0x03	; 3
     662:	31 87       	std	Z+9, r19	; 0x09
     664:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     666:	95 83       	std	Z+5, r25	; 0x05
     668:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
     66a:	17 82       	std	Z+7, r1	; 0x07
     66c:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
     66e:	11 82       	std	Z+1, r1	; 0x01
     670:	10 82       	st	Z, r1
  rxFifo.tail = 0;
     672:	13 82       	std	Z+3, r1	; 0x03
     674:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <udrEmpty>
  newData = false;
     67c:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <newData>
     680:	08 95       	ret

00000682 <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
     686:	ed ef       	ldi	r30, 0xFD	; 253
     688:	f6 e0       	ldi	r31, 0x06	; 6
     68a:	26 81       	ldd	r18, Z+6	; 0x06
     68c:	37 81       	ldd	r19, Z+7	; 0x07
     68e:	64 81       	ldd	r22, Z+4	; 0x04
     690:	75 81       	ldd	r23, Z+5	; 0x05
     692:	26 17       	cp	r18, r22
     694:	37 07       	cpc	r19, r23
     696:	c9 f0       	breq	.+50     	; 0x6ca <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
     698:	c0 85       	ldd	r28, Z+8	; 0x08
     69a:	d1 85       	ldd	r29, Z+9	; 0x09
     69c:	42 81       	ldd	r20, Z+2	; 0x02
     69e:	53 81       	ldd	r21, Z+3	; 0x03
     6a0:	da 01       	movw	r26, r20
     6a2:	11 96       	adiw	r26, 0x01	; 1
     6a4:	b3 83       	std	Z+3, r27	; 0x03
     6a6:	a2 83       	std	Z+2, r26	; 0x02
     6a8:	fe 01       	movw	r30, r28
     6aa:	e4 0f       	add	r30, r20
     6ac:	f5 1f       	adc	r31, r21
     6ae:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
     6b0:	6a 17       	cp	r22, r26
     6b2:	7b 07       	cpc	r23, r27
     6b4:	21 f4       	brne	.+8      	; 0x6be <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
     6b6:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <txFifo+0x3>
     6ba:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <txFifo+0x2>
  txFifo.bytes++;
     6be:	2f 5f       	subi	r18, 0xFF	; 255
     6c0:	3f 4f       	sbci	r19, 0xFF	; 255
     6c2:	30 93 04 07 	sts	0x0704, r19	; 0x800704 <txFifo+0x7>
     6c6:	20 93 03 07 	sts	0x0703, r18	; 0x800703 <txFifo+0x6>
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	08 95       	ret

000006d0 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     6d0:	4f b7       	in	r20, 0x3f	; 63
     6d2:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     6d4:	e2 e6       	ldi	r30, 0x62	; 98
     6d6:	f5 e0       	ldi	r31, 0x05	; 5
     6d8:	20 85       	ldd	r18, Z+8	; 0x08
     6da:	31 85       	ldd	r19, Z+9	; 0x09
     6dc:	80 81       	ld	r24, Z
     6de:	91 81       	ldd	r25, Z+1	; 0x01
     6e0:	bc 01       	movw	r22, r24
     6e2:	6f 5f       	subi	r22, 0xFF	; 255
     6e4:	7f 4f       	sbci	r23, 0xFF	; 255
     6e6:	71 83       	std	Z+1, r23	; 0x01
     6e8:	60 83       	st	Z, r22
     6ea:	d9 01       	movw	r26, r18
     6ec:	a8 0f       	add	r26, r24
     6ee:	b9 1f       	adc	r27, r25
     6f0:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
     6f2:	60 81       	ld	r22, Z
     6f4:	71 81       	ldd	r23, Z+1	; 0x01
     6f6:	24 81       	ldd	r18, Z+4	; 0x04
     6f8:	35 81       	ldd	r19, Z+5	; 0x05
     6fa:	62 17       	cp	r22, r18
     6fc:	73 07       	cpc	r23, r19
     6fe:	21 f4       	brne	.+8      	; 0x708 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
     700:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <rxFifo+0x1>
     704:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <rxFifo>
    rxFifo.bytes--;
     708:	e2 e6       	ldi	r30, 0x62	; 98
     70a:	f5 e0       	ldi	r31, 0x05	; 5
     70c:	26 81       	ldd	r18, Z+6	; 0x06
     70e:	37 81       	ldd	r19, Z+7	; 0x07
     710:	21 50       	subi	r18, 0x01	; 1
     712:	31 09       	sbc	r19, r1
     714:	37 83       	std	Z+7, r19	; 0x07
     716:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
     718:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
     71a:	08 95       	ret

0000071c <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     71c:	1f 92       	push	r1
     71e:	0f 92       	push	r0
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	0f 92       	push	r0
     724:	11 24       	eor	r1, r1
     726:	0b b6       	in	r0, 0x3b	; 59
     728:	0f 92       	push	r0
     72a:	8f 93       	push	r24
     72c:	ef 93       	push	r30
     72e:	ff 93       	push	r31
  udrEmpty = true;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     736:	e9 ec       	ldi	r30, 0xC9	; 201
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	8f 7d       	andi	r24, 0xDF	; 223
     73e:	80 83       	st	Z, r24
}
     740:	ff 91       	pop	r31
     742:	ef 91       	pop	r30
     744:	8f 91       	pop	r24
     746:	0f 90       	pop	r0
     748:	0b be       	out	0x3b, r0	; 59
     74a:	0f 90       	pop	r0
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	0f 90       	pop	r0
     750:	1f 90       	pop	r1
     752:	18 95       	reti

00000754 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     754:	1f 92       	push	r1
     756:	0f 92       	push	r0
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	0f 92       	push	r0
     75c:	11 24       	eor	r1, r1
     75e:	0b b6       	in	r0, 0x3b	; 59
     760:	0f 92       	push	r0
     762:	2f 93       	push	r18
     764:	3f 93       	push	r19
     766:	4f 93       	push	r20
     768:	5f 93       	push	r21
     76a:	6f 93       	push	r22
     76c:	7f 93       	push	r23
     76e:	8f 93       	push	r24
     770:	9f 93       	push	r25
     772:	af 93       	push	r26
     774:	bf 93       	push	r27
     776:	ef 93       	push	r30
     778:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     77a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     77e:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     782:	8c 71       	andi	r24, 0x1C	; 28
     784:	59 f5       	brne	.+86     	; 0x7dc <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     786:	e2 e6       	ldi	r30, 0x62	; 98
     788:	f5 e0       	ldi	r31, 0x05	; 5
     78a:	46 81       	ldd	r20, Z+6	; 0x06
     78c:	57 81       	ldd	r21, Z+7	; 0x07
     78e:	84 81       	ldd	r24, Z+4	; 0x04
     790:	95 81       	ldd	r25, Z+5	; 0x05
     792:	48 17       	cp	r20, r24
     794:	59 07       	cpc	r21, r25
     796:	11 f1       	breq	.+68     	; 0x7dc <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     798:	40 85       	ldd	r20, Z+8	; 0x08
     79a:	51 85       	ldd	r21, Z+9	; 0x09
     79c:	82 81       	ldd	r24, Z+2	; 0x02
     79e:	93 81       	ldd	r25, Z+3	; 0x03
     7a0:	bc 01       	movw	r22, r24
     7a2:	6f 5f       	subi	r22, 0xFF	; 255
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	73 83       	std	Z+3, r23	; 0x03
     7a8:	62 83       	std	Z+2, r22	; 0x02
     7aa:	da 01       	movw	r26, r20
     7ac:	a8 0f       	add	r26, r24
     7ae:	b9 1f       	adc	r27, r25
     7b0:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     7b2:	22 81       	ldd	r18, Z+2	; 0x02
     7b4:	33 81       	ldd	r19, Z+3	; 0x03
     7b6:	84 81       	ldd	r24, Z+4	; 0x04
     7b8:	95 81       	ldd	r25, Z+5	; 0x05
     7ba:	28 17       	cp	r18, r24
     7bc:	39 07       	cpc	r19, r25
     7be:	21 f4       	brne	.+8      	; 0x7c8 <__vector_36+0x74>
      rxFifo.tail = 0;
     7c0:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <rxFifo+0x3>
     7c4:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <rxFifo+0x2>
    rxFifo.bytes++;
     7c8:	e2 e6       	ldi	r30, 0x62	; 98
     7ca:	f5 e0       	ldi	r31, 0x05	; 5
     7cc:	86 81       	ldd	r24, Z+6	; 0x06
     7ce:	97 81       	ldd	r25, Z+7	; 0x07
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	97 83       	std	Z+7, r25	; 0x07
     7d4:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     7dc:	ff 91       	pop	r31
     7de:	ef 91       	pop	r30
     7e0:	bf 91       	pop	r27
     7e2:	af 91       	pop	r26
     7e4:	9f 91       	pop	r25
     7e6:	8f 91       	pop	r24
     7e8:	7f 91       	pop	r23
     7ea:	6f 91       	pop	r22
     7ec:	5f 91       	pop	r21
     7ee:	4f 91       	pop	r20
     7f0:	3f 91       	pop	r19
     7f2:	2f 91       	pop	r18
     7f4:	0f 90       	pop	r0
     7f6:	0b be       	out	0x3b, r0	; 59
     7f8:	0f 90       	pop	r0
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	0f 90       	pop	r0
     7fe:	1f 90       	pop	r1
     800:	18 95       	reti

00000802 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     802:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <txFifo+0x6>
     806:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <txFifo+0x7>
     80a:	00 97       	sbiw	r24, 0x00	; 0
     80c:	69 f1       	breq	.+90     	; 0x868 <HAL_UartTaskHandler+0x66>
     80e:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <udrEmpty>
     812:	22 23       	and	r18, r18
     814:	49 f1       	breq	.+82     	; 0x868 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     816:	ed ef       	ldi	r30, 0xFD	; 253
     818:	f6 e0       	ldi	r31, 0x06	; 6
     81a:	60 85       	ldd	r22, Z+8	; 0x08
     81c:	71 85       	ldd	r23, Z+9	; 0x09
     81e:	20 81       	ld	r18, Z
     820:	31 81       	ldd	r19, Z+1	; 0x01
     822:	a9 01       	movw	r20, r18
     824:	4f 5f       	subi	r20, 0xFF	; 255
     826:	5f 4f       	sbci	r21, 0xFF	; 255
     828:	51 83       	std	Z+1, r21	; 0x01
     82a:	40 83       	st	Z, r20
     82c:	db 01       	movw	r26, r22
     82e:	a2 0f       	add	r26, r18
     830:	b3 1f       	adc	r27, r19
     832:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     834:	64 81       	ldd	r22, Z+4	; 0x04
     836:	75 81       	ldd	r23, Z+5	; 0x05
     838:	46 17       	cp	r20, r22
     83a:	57 07       	cpc	r21, r23
     83c:	21 f4       	brne	.+8      	; 0x846 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     83e:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <txFifo+0x1>
     842:	10 92 fd 06 	sts	0x06FD, r1	; 0x8006fd <txFifo>
    txFifo.bytes--;
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	90 93 04 07 	sts	0x0704, r25	; 0x800704 <txFifo+0x7>
     84c:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     850:	9f b7       	in	r25, 0x3f	; 63
     852:	f8 94       	cli
      UDRx = byte;
     854:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     858:	e9 ec       	ldi	r30, 0xC9	; 201
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	80 62       	ori	r24, 0x20	; 32
     860:	80 83       	st	Z, r24
      udrEmpty = false;
     862:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     866:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     868:	2f b7       	in	r18, 0x3f	; 63
     86a:	f8 94       	cli
      new = newData;
     86c:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <newData>
      newData = false;
     870:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <newData>
      bytes = rxFifo.bytes;
     874:	40 91 68 05 	lds	r20, 0x0568	; 0x800568 <rxFifo+0x6>
     878:	50 91 69 05 	lds	r21, 0x0569	; 0x800569 <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     87c:	2f bf       	out	0x3f, r18	; 63

    if (new)
     87e:	99 23       	and	r25, r25
     880:	11 f0       	breq	.+4      	; 0x886 <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     882:	ca 01       	movw	r24, r20
     884:	dc cc       	rjmp	.-1608   	; 0x23e <HAL_UartBytesReceived>
     886:	08 95       	ret

00000888 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     888:	e7 eb       	ldi	r30, 0xB7	; 183
     88a:	fa e1       	ldi	r31, 0x1A	; 26
     88c:	14 82       	std	Z+4, r1	; 0x04
     88e:	15 82       	std	Z+5, r1	; 0x05
     890:	11 82       	std	Z+1, r1	; 0x01
     892:	10 82       	st	Z, r1
     894:	17 a2       	std	Z+39, r1	; 0x27
     896:	16 a2       	std	Z+38, r1	; 0x26
     898:	ed eb       	ldi	r30, 0xBD	; 189
     89a:	fa e1       	ldi	r31, 0x1A	; 26
     89c:	8d ed       	ldi	r24, 0xDD	; 221
     89e:	9a e1       	ldi	r25, 0x1A	; 26
     8a0:	11 92       	st	Z+, r1
     8a2:	11 92       	st	Z+, r1
     8a4:	e8 17       	cp	r30, r24
     8a6:	f9 07       	cpc	r31, r25
     8a8:	d9 f7       	brne	.-10     	; 0x8a0 <NWK_Init+0x18>
     8aa:	42 d6       	rcall	.+3204   	; 0x1530 <nwkTxInit>
     8ac:	60 d3       	rcall	.+1728   	; 0xf6e <nwkRxInit>
     8ae:	0d d1       	rcall	.+538    	; 0xaca <nwkFrameInit>
     8b0:	40 d0       	rcall	.+128    	; 0x932 <nwkDataReqInit>
     8b2:	92 c1       	rjmp	.+804    	; 0xbd8 <nwkRouteInit>
     8b4:	08 95       	ret

000008b6 <NWK_SetAddr>:
     8b6:	90 93 b8 1a 	sts	0x1AB8, r25	; 0x801ab8 <nwkIb+0x1>
     8ba:	80 93 b7 1a 	sts	0x1AB7, r24	; 0x801ab7 <nwkIb>
     8be:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <PHY_SetShortAddr>
     8c2:	08 95       	ret

000008c4 <NWK_SetPanId>:
     8c4:	90 93 ba 1a 	sts	0x1ABA, r25	; 0x801aba <nwkIb+0x3>
     8c8:	80 93 b9 1a 	sts	0x1AB9, r24	; 0x801ab9 <nwkIb+0x2>
     8cc:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <PHY_SetPanId>
     8d0:	08 95       	ret

000008d2 <NWK_OpenEndpoint>:
     8d2:	e8 2f       	mov	r30, r24
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	ee 0f       	add	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	e3 54       	subi	r30, 0x43	; 67
     8dc:	f5 4e       	sbci	r31, 0xE5	; 229
     8de:	71 83       	std	Z+1, r23	; 0x01
     8e0:	60 83       	st	Z, r22
     8e2:	08 95       	ret

000008e4 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     8e4:	8b d3       	rcall	.+1814   	; 0xffc <nwkRxTaskHandler>
  nwkTxTaskHandler();
     8e6:	20 d7       	rcall	.+3648   	; 0x1728 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     8e8:	4d c0       	rjmp	.+154    	; 0x984 <nwkDataReqTaskHandler>
     8ea:	08 95       	ret

000008ec <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     8ec:	e0 91 07 07 	lds	r30, 0x0707	; 0x800707 <nwkDataReqQueue>
     8f0:	f0 91 08 07 	lds	r31, 0x0708	; 0x800708 <nwkDataReqQueue+0x1>
     8f4:	30 97       	sbiw	r30, 0x00	; 0
     8f6:	d9 f0       	breq	.+54     	; 0x92e <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     8f8:	22 81       	ldd	r18, Z+2	; 0x02
     8fa:	33 81       	ldd	r19, Z+3	; 0x03
     8fc:	82 17       	cp	r24, r18
     8fe:	93 07       	cpc	r25, r19
     900:	89 f4       	brne	.+34     	; 0x924 <nwkDataReqTxConf+0x38>
     902:	05 c0       	rjmp	.+10     	; 0x90e <nwkDataReqTxConf+0x22>
     904:	22 81       	ldd	r18, Z+2	; 0x02
     906:	33 81       	ldd	r19, Z+3	; 0x03
     908:	28 17       	cp	r18, r24
     90a:	39 07       	cpc	r19, r25
     90c:	59 f4       	brne	.+22     	; 0x924 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     90e:	dc 01       	movw	r26, r24
     910:	ad 57       	subi	r26, 0x7D	; 125
     912:	bf 4f       	sbci	r27, 0xFF	; 255
     914:	2c 91       	ld	r18, X
     916:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     918:	13 96       	adiw	r26, 0x03	; 3
     91a:	2c 91       	ld	r18, X
     91c:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     91e:	22 e0       	ldi	r18, 0x02	; 2
     920:	24 83       	std	Z+4, r18	; 0x04
      break;
     922:	05 c0       	rjmp	.+10     	; 0x92e <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     924:	01 90       	ld	r0, Z+
     926:	f0 81       	ld	r31, Z
     928:	e0 2d       	mov	r30, r0
     92a:	30 97       	sbiw	r30, 0x00	; 0
     92c:	59 f7       	brne	.-42     	; 0x904 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     92e:	11 c1       	rjmp	.+546    	; 0xb52 <nwkFrameFree>
     930:	08 95       	ret

00000932 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     932:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <nwkDataReqQueue+0x1>
     936:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <nwkDataReqQueue>
     93a:	08 95       	ret

0000093c <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     93c:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     93e:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     940:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     942:	13 82       	std	Z+3, r1	; 0x03
     944:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     946:	a7 eb       	ldi	r26, 0xB7	; 183
     948:	ba e1       	ldi	r27, 0x1A	; 26
     94a:	96 96       	adiw	r26, 0x26	; 38
     94c:	8d 91       	ld	r24, X+
     94e:	9c 91       	ld	r25, X
     950:	97 97       	sbiw	r26, 0x27	; 39
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	97 96       	adiw	r26, 0x27	; 39
     956:	9c 93       	st	X, r25
     958:	8e 93       	st	-X, r24
     95a:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     95c:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <nwkDataReqQueue>
     960:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <nwkDataReqQueue+0x1>
     964:	00 97       	sbiw	r24, 0x00	; 0
     966:	39 f4       	brne	.+14     	; 0x976 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     968:	11 82       	std	Z+1, r1	; 0x01
     96a:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     96c:	f0 93 08 07 	sts	0x0708, r31	; 0x800708 <nwkDataReqQueue+0x1>
     970:	e0 93 07 07 	sts	0x0707, r30	; 0x800707 <nwkDataReqQueue>
     974:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     976:	91 83       	std	Z+1, r25	; 0x01
     978:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     97a:	f0 93 08 07 	sts	0x0708, r31	; 0x800708 <nwkDataReqQueue+0x1>
     97e:	e0 93 07 07 	sts	0x0707, r30	; 0x800707 <nwkDataReqQueue>
     982:	08 95       	ret

00000984 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     98c:	e0 91 07 07 	lds	r30, 0x0707	; 0x800707 <nwkDataReqQueue>
     990:	f0 91 08 07 	lds	r31, 0x0708	; 0x800708 <nwkDataReqQueue+0x1>
     994:	30 97       	sbiw	r30, 0x00	; 0
     996:	09 f4       	brne	.+2      	; 0x99a <nwkDataReqTaskHandler+0x16>
     998:	93 c0       	rjmp	.+294    	; 0xac0 <nwkDataReqTaskHandler+0x13c>
     99a:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     99c:	8c 81       	ldd	r24, Y+4	; 0x04
     99e:	88 23       	and	r24, r24
     9a0:	21 f0       	breq	.+8      	; 0x9aa <nwkDataReqTaskHandler+0x26>
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <nwkDataReqTaskHandler+0x24>
     9a6:	66 c0       	rjmp	.+204    	; 0xa74 <nwkDataReqTaskHandler+0xf0>
     9a8:	85 c0       	rjmp	.+266    	; 0xab4 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     9aa:	9a d0       	rcall	.+308    	; 0xae0 <nwkFrameAlloc>
     9ac:	8c 01       	movw	r16, r24
     9ae:	00 97       	sbiw	r24, 0x00	; 0
     9b0:	21 f4       	brne	.+8      	; 0x9ba <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     9b6:	8f 87       	std	Y+15, r24	; 0x0f
     9b8:	83 c0       	rjmp	.+262    	; 0xac0 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     9ba:	9b 83       	std	Y+3, r25	; 0x03
     9bc:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     9c2:	f8 01       	movw	r30, r16
     9c4:	e9 57       	subi	r30, 0x79	; 121
     9c6:	ff 4f       	sbci	r31, 0xFF	; 255
     9c8:	86 e7       	ldi	r24, 0x76	; 118
     9ca:	94 e0       	ldi	r25, 0x04	; 4
     9cc:	91 83       	std	Z+1, r25	; 0x01
     9ce:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     9d0:	31 97       	sbiw	r30, 0x01	; 1
     9d2:	89 85       	ldd	r24, Y+9	; 0x09
     9d4:	82 fb       	bst	r24, 2
     9d6:	88 27       	eor	r24, r24
     9d8:	80 f9       	bld	r24, 0
     9da:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     9dc:	99 85       	ldd	r25, Y+9	; 0x09
     9de:	d8 01       	movw	r26, r16
     9e0:	1b 96       	adiw	r26, 0x0b	; 11
     9e2:	8c 91       	ld	r24, X
     9e4:	1b 97       	sbiw	r26, 0x0b	; 11
     9e6:	90 fb       	bst	r25, 0
     9e8:	80 f9       	bld	r24, 0
     9ea:	1b 96       	adiw	r26, 0x0b	; 11
     9ec:	8c 93       	st	X, r24
     9ee:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     9f0:	99 85       	ldd	r25, Y+9	; 0x09
     9f2:	93 fb       	bst	r25, 3
     9f4:	99 27       	eor	r25, r25
     9f6:	90 f9       	bld	r25, 0
     9f8:	90 fb       	bst	r25, 0
     9fa:	82 f9       	bld	r24, 2
     9fc:	1b 96       	adiw	r26, 0x0b	; 11
     9fe:	8c 93       	st	X, r24
     a00:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     a02:	e7 eb       	ldi	r30, 0xB7	; 183
     a04:	fa e1       	ldi	r31, 0x1A	; 26
     a06:	84 81       	ldd	r24, Z+4	; 0x04
     a08:	8f 5f       	subi	r24, 0xFF	; 255
     a0a:	84 83       	std	Z+4, r24	; 0x04
     a0c:	1c 96       	adiw	r26, 0x0c	; 12
     a0e:	8c 93       	st	X, r24
     a10:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	1e 96       	adiw	r26, 0x0e	; 14
     a18:	9c 93       	st	X, r25
     a1a:	8e 93       	st	-X, r24
     a1c:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     a1e:	8d 81       	ldd	r24, Y+5	; 0x05
     a20:	9e 81       	ldd	r25, Y+6	; 0x06
     a22:	50 96       	adiw	r26, 0x10	; 16
     a24:	9c 93       	st	X, r25
     a26:	8e 93       	st	-X, r24
     a28:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     a2a:	88 85       	ldd	r24, Y+8	; 0x08
     a2c:	98 2f       	mov	r25, r24
     a2e:	9f 70       	andi	r25, 0x0F	; 15
     a30:	51 96       	adiw	r26, 0x11	; 17
     a32:	8c 91       	ld	r24, X
     a34:	51 97       	sbiw	r26, 0x11	; 17
     a36:	80 7f       	andi	r24, 0xF0	; 240
     a38:	89 2b       	or	r24, r25
     a3a:	51 96       	adiw	r26, 0x11	; 17
     a3c:	8c 93       	st	X, r24
     a3e:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     a40:	9f 81       	ldd	r25, Y+7	; 0x07
     a42:	92 95       	swap	r25
     a44:	90 7f       	andi	r25, 0xF0	; 240
     a46:	8f 70       	andi	r24, 0x0F	; 15
     a48:	89 2b       	or	r24, r25
     a4a:	51 96       	adiw	r26, 0x11	; 17
     a4c:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     a4e:	f8 01       	movw	r30, r16
     a50:	ef 57       	subi	r30, 0x7F	; 127
     a52:	ff 4f       	sbci	r31, 0xFF	; 255
     a54:	4c 85       	ldd	r20, Y+12	; 0x0c
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	6a 85       	ldd	r22, Y+10	; 0x0a
     a5a:	7b 85       	ldd	r23, Y+11	; 0x0b
     a5c:	80 81       	ld	r24, Z
     a5e:	91 81       	ldd	r25, Z+1	; 0x01
     a60:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <memcpy>
  frame->size += req->size;
     a64:	f8 01       	movw	r30, r16
     a66:	91 81       	ldd	r25, Z+1	; 0x01
     a68:	8c 85       	ldd	r24, Y+12	; 0x0c
     a6a:	89 0f       	add	r24, r25
     a6c:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     a6e:	c8 01       	movw	r24, r16
     a70:	82 d5       	rcall	.+2820   	; 0x1576 <nwkTxFrame>
     a72:	26 c0       	rjmp	.+76     	; 0xac0 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     a74:	ec 17       	cp	r30, r28
     a76:	fd 07       	cpc	r31, r29
     a78:	41 f4       	brne	.+16     	; 0xa8a <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <nwkDataReqQueue+0x1>
     a82:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <nwkDataReqQueue>
     a86:	0a c0       	rjmp	.+20     	; 0xa9c <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     a88:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	8c 17       	cp	r24, r28
     a90:	9d 07       	cpc	r25, r29
     a92:	d1 f7       	brne	.-12     	; 0xa88 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     a94:	88 81       	ld	r24, Y
     a96:	99 81       	ldd	r25, Y+1	; 0x01
     a98:	91 83       	std	Z+1, r25	; 0x01
     a9a:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     a9c:	e7 eb       	ldi	r30, 0xB7	; 183
     a9e:	fa e1       	ldi	r31, 0x1A	; 26
     aa0:	86 a1       	ldd	r24, Z+38	; 0x26
     aa2:	97 a1       	ldd	r25, Z+39	; 0x27
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	97 a3       	std	Z+39, r25	; 0x27
     aa8:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     aaa:	ed 85       	ldd	r30, Y+13	; 0x0d
     aac:	fe 85       	ldd	r31, Y+14	; 0x0e
     aae:	ce 01       	movw	r24, r28
     ab0:	19 95       	eicall
     ab2:	06 c0       	rjmp	.+12     	; 0xac0 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     ab4:	09 90       	ld	r0, Y+
     ab6:	d8 81       	ld	r29, Y
     ab8:	c0 2d       	mov	r28, r0
     aba:	20 97       	sbiw	r28, 0x00	; 0
     abc:	09 f0       	breq	.+2      	; 0xac0 <nwkDataReqTaskHandler+0x13c>
     abe:	6e cf       	rjmp	.-292    	; 0x99c <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	08 95       	ret

00000aca <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     aca:	e9 e0       	ldi	r30, 0x09	; 9
     acc:	f7 e0       	ldi	r31, 0x07	; 7
     ace:	87 e1       	ldi	r24, 0x17	; 23
     ad0:	97 e1       	ldi	r25, 0x17	; 23
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     ad2:	10 82       	st	Z, r1
     ad4:	e7 57       	subi	r30, 0x77	; 119
     ad6:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     ad8:	e8 17       	cp	r30, r24
     ada:	f9 07       	cpc	r31, r25
     adc:	d1 f7       	brne	.-12     	; 0xad2 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     ade:	08 95       	ret

00000ae0 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     ae0:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <nwkFrameFrames>
     ae4:	88 23       	and	r24, r24
     ae6:	59 f0       	breq	.+22     	; 0xafe <nwkFrameAlloc+0x1e>
     ae8:	e2 e9       	ldi	r30, 0x92	; 146
     aea:	f7 e0       	ldi	r31, 0x07	; 7
     aec:	67 e1       	ldi	r22, 0x17	; 23
     aee:	77 e1       	ldi	r23, 0x17	; 23
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	ac 01       	movw	r20, r24
     af6:	20 81       	ld	r18, Z
     af8:	21 11       	cpse	r18, r1
     afa:	22 c0       	rjmp	.+68     	; 0xb40 <nwkFrameAlloc+0x60>
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <nwkFrameAlloc+0x22>
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     b02:	69 e8       	ldi	r22, 0x89	; 137
     b04:	64 9f       	mul	r22, r20
     b06:	90 01       	movw	r18, r0
     b08:	65 9f       	mul	r22, r21
     b0a:	30 0d       	add	r19, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	c9 01       	movw	r24, r18
     b10:	87 5f       	subi	r24, 0xF7	; 247
     b12:	98 4f       	sbci	r25, 0xF8	; 248
     b14:	fc 01       	movw	r30, r24
     b16:	11 92       	st	Z+, r1
     b18:	6a 95       	dec	r22
     b1a:	e9 f7       	brne	.-6      	; 0xb16 <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     b1c:	40 e1       	ldi	r20, 0x10	; 16
     b1e:	fc 01       	movw	r30, r24
     b20:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     b22:	ef 57       	subi	r30, 0x7F	; 127
     b24:	ff 4f       	sbci	r31, 0xFF	; 255
     b26:	25 5e       	subi	r18, 0xE5	; 229
     b28:	38 4f       	sbci	r19, 0xF8	; 248
     b2a:	31 83       	std	Z+1, r19	; 0x01
     b2c:	20 83       	st	Z, r18
      nwkIb.lock++;
     b2e:	e7 eb       	ldi	r30, 0xB7	; 183
     b30:	fa e1       	ldi	r31, 0x1A	; 26
     b32:	26 a1       	ldd	r18, Z+38	; 0x26
     b34:	37 a1       	ldd	r19, Z+39	; 0x27
     b36:	2f 5f       	subi	r18, 0xFF	; 255
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	37 a3       	std	Z+39, r19	; 0x27
     b3c:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     b3e:	08 95       	ret
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	e7 57       	subi	r30, 0x77	; 119
     b44:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     b46:	e6 17       	cp	r30, r22
     b48:	f7 07       	cpc	r31, r23
     b4a:	a1 f6       	brne	.-88     	; 0xaf4 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
}
     b50:	08 95       	ret

00000b52 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     b52:	fc 01       	movw	r30, r24
     b54:	10 82       	st	Z, r1
  nwkIb.lock--;
     b56:	e7 eb       	ldi	r30, 0xB7	; 183
     b58:	fa e1       	ldi	r31, 0x1A	; 26
     b5a:	86 a1       	ldd	r24, Z+38	; 0x26
     b5c:	97 a1       	ldd	r25, Z+39	; 0x27
     b5e:	01 97       	sbiw	r24, 0x01	; 1
     b60:	97 a3       	std	Z+39, r25	; 0x27
     b62:	86 a3       	std	Z+38, r24	; 0x26
     b64:	08 95       	ret

00000b66 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	41 f0       	breq	.+16     	; 0xb7a <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     b6a:	fc 01       	movw	r30, r24
     b6c:	e7 57       	subi	r30, 0x77	; 119
     b6e:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     b70:	87 e1       	ldi	r24, 0x17	; 23
     b72:	e7 31       	cpi	r30, 0x17	; 23
     b74:	f8 07       	cpc	r31, r24
     b76:	18 f0       	brcs	.+6      	; 0xb7e <nwkFrameNext+0x18>
     b78:	12 c0       	rjmp	.+36     	; 0xb9e <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     b7a:	e9 e0       	ldi	r30, 0x09	; 9
     b7c:	f7 e0       	ldi	r31, 0x07	; 7
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     b7e:	80 81       	ld	r24, Z
     b80:	88 23       	and	r24, r24
     b82:	21 f0       	breq	.+8      	; 0xb8c <nwkFrameNext+0x26>
     b84:	0f c0       	rjmp	.+30     	; 0xba4 <nwkFrameNext+0x3e>
     b86:	80 81       	ld	r24, Z
     b88:	81 11       	cpse	r24, r1
     b8a:	0f c0       	rjmp	.+30     	; 0xbaa <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     b8c:	e7 57       	subi	r30, 0x77	; 119
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	87 e1       	ldi	r24, 0x17	; 23
     b92:	e7 31       	cpi	r30, 0x17	; 23
     b94:	f8 07       	cpc	r31, r24
     b96:	b8 f3       	brcs	.-18     	; 0xb86 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	08 95       	ret
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     ba4:	8e 2f       	mov	r24, r30
     ba6:	9f 2f       	mov	r25, r31
     ba8:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     baa:	8e 2f       	mov	r24, r30
     bac:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     bae:	08 95       	ret

00000bb0 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     bb0:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     bb2:	dc 01       	movw	r26, r24
     bb4:	ad 57       	subi	r26, 0x7D	; 125
     bb6:	bf 4f       	sbci	r27, 0xFF	; 255
     bb8:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     bba:	a7 eb       	ldi	r26, 0xB7	; 183
     bbc:	ba e1       	ldi	r27, 0x1A	; 26
     bbe:	14 96       	adiw	r26, 0x04	; 4
     bc0:	9c 91       	ld	r25, X
     bc2:	14 97       	sbiw	r26, 0x04	; 4
     bc4:	9f 5f       	subi	r25, 0xFF	; 255
     bc6:	14 96       	adiw	r26, 0x04	; 4
     bc8:	9c 93       	st	X, r25
     bca:	14 97       	sbiw	r26, 0x04	; 4
     bcc:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     bce:	8d 91       	ld	r24, X+
     bd0:	9c 91       	ld	r25, X
     bd2:	96 87       	std	Z+14, r25	; 0x0e
     bd4:	85 87       	std	Z+13, r24	; 0x0d
     bd6:	08 95       	ret

00000bd8 <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     bd8:	a8 e1       	ldi	r26, 0x18	; 24
     bda:	b7 e1       	ldi	r27, 0x17	; 23
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	4f ef       	ldi	r20, 0xFF	; 255
     be2:	5f ef       	ldi	r21, 0xFF	; 255
     be4:	11 96       	adiw	r26, 0x01	; 1
     be6:	5c 93       	st	X, r21
     be8:	4e 93       	st	-X, r20
     bea:	fc 01       	movw	r30, r24
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	ee 0f       	add	r30, r30
     bf2:	ff 1f       	adc	r31, r31
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	e8 1b       	sub	r30, r24
     bfa:	f9 0b       	sbc	r31, r25
     bfc:	e9 5e       	subi	r30, 0xE9	; 233
     bfe:	f8 4e       	sbci	r31, 0xE8	; 232
     c00:	20 81       	ld	r18, Z
     c02:	2e 7f       	andi	r18, 0xFE	; 254
     c04:	20 83       	st	Z, r18
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	1c 92       	st	X, r1
     c0a:	14 97       	sbiw	r26, 0x04	; 4
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	17 96       	adiw	r26, 0x07	; 7
     c10:	84 36       	cpi	r24, 0x64	; 100
     c12:	91 05       	cpc	r25, r1
     c14:	39 f7       	brne	.-50     	; 0xbe4 <nwkRouteInit+0xc>
     c16:	08 95       	ret

00000c18 <NWK_RouteFindEntry>:
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	e8 e1       	ldi	r30, 0x18	; 24
     c22:	f7 e1       	ldi	r31, 0x17	; 23
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	06 2f       	mov	r16, r22
     c2a:	10 e0       	ldi	r17, 0x00	; 0
     c2c:	40 81       	ld	r20, Z
     c2e:	51 81       	ldd	r21, Z+1	; 0x01
     c30:	48 17       	cp	r20, r24
     c32:	59 07       	cpc	r21, r25
     c34:	b1 f4       	brne	.+44     	; 0xc62 <NWK_RouteFindEntry+0x4a>
     c36:	d9 01       	movw	r26, r18
     c38:	aa 0f       	add	r26, r26
     c3a:	bb 1f       	adc	r27, r27
     c3c:	aa 0f       	add	r26, r26
     c3e:	bb 1f       	adc	r27, r27
     c40:	aa 0f       	add	r26, r26
     c42:	bb 1f       	adc	r27, r27
     c44:	a2 1b       	sub	r26, r18
     c46:	b3 0b       	sbc	r27, r19
     c48:	a9 5e       	subi	r26, 0xE9	; 233
     c4a:	b8 4e       	sbci	r27, 0xE8	; 232
     c4c:	4c 91       	ld	r20, X
     c4e:	46 95       	lsr	r20
     c50:	41 70       	andi	r20, 0x01	; 1
     c52:	c4 2f       	mov	r28, r20
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	d4 2f       	mov	r29, r20
     c58:	c0 17       	cp	r28, r16
     c5a:	d1 07       	cpc	r29, r17
     c5c:	11 f4       	brne	.+4      	; 0xc62 <NWK_RouteFindEntry+0x4a>
     c5e:	cd 01       	movw	r24, r26
     c60:	08 c0       	rjmp	.+16     	; 0xc72 <NWK_RouteFindEntry+0x5a>
     c62:	2f 5f       	subi	r18, 0xFF	; 255
     c64:	3f 4f       	sbci	r19, 0xFF	; 255
     c66:	37 96       	adiw	r30, 0x07	; 7
     c68:	24 36       	cpi	r18, 0x64	; 100
     c6a:	31 05       	cpc	r19, r1
     c6c:	f9 f6       	brne	.-66     	; 0xc2c <NWK_RouteFindEntry+0x14>
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	08 95       	ret

00000c7c <NWK_RouteNewEntry>:
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e7 e1       	ldi	r30, 0x17	; 23
     c82:	f7 e1       	ldi	r31, 0x17	; 23
     c84:	80 81       	ld	r24, Z
     c86:	80 fd       	sbrc	r24, 0
     c88:	0d c0       	rjmp	.+26     	; 0xca4 <NWK_RouteNewEntry+0x28>
     c8a:	85 81       	ldd	r24, Z+5	; 0x05
     c8c:	88 23       	and	r24, r24
     c8e:	81 f0       	breq	.+32     	; 0xcb0 <NWK_RouteNewEntry+0x34>
     c90:	10 97       	sbiw	r26, 0x00	; 0
     c92:	39 f0       	breq	.+14     	; 0xca2 <NWK_RouteNewEntry+0x26>
     c94:	15 96       	adiw	r26, 0x05	; 5
     c96:	9c 91       	ld	r25, X
     c98:	15 97       	sbiw	r26, 0x05	; 5
     c9a:	89 17       	cp	r24, r25
     c9c:	18 f4       	brcc	.+6      	; 0xca4 <NWK_RouteNewEntry+0x28>
     c9e:	df 01       	movw	r26, r30
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <NWK_RouteNewEntry+0x28>
     ca2:	df 01       	movw	r26, r30
     ca4:	37 96       	adiw	r30, 0x07	; 7
     ca6:	89 e1       	ldi	r24, 0x19	; 25
     ca8:	e3 3d       	cpi	r30, 0xD3	; 211
     caa:	f8 07       	cpc	r31, r24
     cac:	59 f7       	brne	.-42     	; 0xc84 <NWK_RouteNewEntry+0x8>
     cae:	fd 01       	movw	r30, r26
     cb0:	80 81       	ld	r24, Z
     cb2:	8d 70       	andi	r24, 0x0D	; 13
     cb4:	80 63       	ori	r24, 0x30	; 48
     cb6:	80 83       	st	Z, r24
     cb8:	80 e8       	ldi	r24, 0x80	; 128
     cba:	85 83       	std	Z+5, r24	; 0x05
     cbc:	cf 01       	movw	r24, r30
     cbe:	08 95       	ret

00000cc0 <NWK_RouteFreeEntry>:
     cc0:	fc 01       	movw	r30, r24
     cc2:	80 81       	ld	r24, Z
     cc4:	80 fd       	sbrc	r24, 0
     cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <NWK_RouteFreeEntry+0x12>
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	9f ef       	ldi	r25, 0xFF	; 255
     ccc:	92 83       	std	Z+2, r25	; 0x02
     cce:	81 83       	std	Z+1, r24	; 0x01
     cd0:	15 82       	std	Z+5, r1	; 0x05
     cd2:	08 95       	ret

00000cd4 <NWK_RouteNextHop>:
     cd4:	a1 df       	rcall	.-190    	; 0xc18 <NWK_RouteFindEntry>
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	21 f0       	breq	.+8      	; 0xce2 <NWK_RouteNextHop+0xe>
     cda:	fc 01       	movw	r30, r24
     cdc:	83 81       	ldd	r24, Z+3	; 0x03
     cde:	94 81       	ldd	r25, Z+4	; 0x04
     ce0:	08 95       	ret
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	9f ef       	ldi	r25, 0xFF	; 255
     ce6:	08 95       	ret

00000ce8 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     ce8:	97 df       	rcall	.-210    	; 0xc18 <NWK_RouteFindEntry>
  if (entry)
     cea:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     cec:	09 f0       	breq	.+2      	; 0xcf0 <nwkRouteRemove+0x8>
     cee:	e8 cf       	rjmp	.-48     	; 0xcc0 <NWK_RouteFreeEntry>
     cf0:	08 95       	ret

00000cf2 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     cfc:	01 85       	ldd	r16, Z+9	; 0x09
     cfe:	12 85       	ldd	r17, Z+10	; 0x0a
     d00:	11 23       	and	r17, r17
     d02:	2c f4       	brge	.+10     	; 0xd0e <nwkRouteFrameReceived+0x1c>
     d04:	85 85       	ldd	r24, Z+13	; 0x0d
     d06:	96 85       	ldd	r25, Z+14	; 0x0e
     d08:	08 17       	cp	r16, r24
     d0a:	19 07       	cpc	r17, r25
     d0c:	e1 f5       	brne	.+120    	; 0xd86 <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     d0e:	85 81       	ldd	r24, Z+5	; 0x05
     d10:	96 81       	ldd	r25, Z+6	; 0x06
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	c1 f1       	breq	.+112    	; 0xd86 <nwkRouteFrameReceived+0x94>
     d16:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	85 85       	ldd	r24, Z+13	; 0x0d
     d1c:	96 85       	ldd	r25, Z+14	; 0x0e
     d1e:	7c df       	rcall	.-264    	; 0xc18 <NWK_RouteFindEntry>
     d20:	fc 01       	movw	r30, r24

  if (entry)
     d22:	89 2b       	or	r24, r25
     d24:	a1 f0       	breq	.+40     	; 0xd4e <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     d26:	8f 81       	ldd	r24, Y+7	; 0x07
     d28:	98 85       	ldd	r25, Y+8	; 0x08
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	f9 f4       	brne	.+62     	; 0xd6c <nwkRouteFrameReceived+0x7a>
     d2e:	20 91 b7 1a 	lds	r18, 0x1AB7	; 0x801ab7 <nwkIb>
     d32:	30 91 b8 1a 	lds	r19, 0x1AB8	; 0x801ab8 <nwkIb+0x1>
     d36:	8f 85       	ldd	r24, Y+15	; 0x0f
     d38:	98 89       	ldd	r25, Y+16	; 0x10
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	b1 f4       	brne	.+44     	; 0xd6c <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     d40:	14 83       	std	Z+4, r17	; 0x04
     d42:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     d44:	80 81       	ld	r24, Z
     d46:	8f 70       	andi	r24, 0x0F	; 15
     d48:	80 63       	ori	r24, 0x30	; 48
     d4a:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     d4c:	0a c0       	rjmp	.+20     	; 0xd62 <nwkRouteFrameReceived+0x70>
     d4e:	96 df       	rcall	.-212    	; 0xc7c <NWK_RouteNewEntry>
     d50:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     d52:	8d 85       	ldd	r24, Y+13	; 0x0d
     d54:	9e 85       	ldd	r25, Y+14	; 0x0e
     d56:	92 83       	std	Z+2, r25	; 0x02
     d58:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     d5a:	89 85       	ldd	r24, Y+9	; 0x09
     d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d5e:	94 83       	std	Z+4, r25	; 0x04
     d60:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     d62:	cd 57       	subi	r28, 0x7D	; 125
     d64:	df 4f       	sbci	r29, 0xFF	; 255
     d66:	88 81       	ld	r24, Y
     d68:	86 83       	std	Z+6, r24	; 0x06
     d6a:	0d c0       	rjmp	.+26     	; 0xd86 <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     d6c:	83 81       	ldd	r24, Z+3	; 0x03
     d6e:	94 81       	ldd	r25, Z+4	; 0x04
     d70:	08 17       	cp	r16, r24
     d72:	19 07       	cpc	r17, r25
     d74:	b1 f3       	breq	.-20     	; 0xd62 <nwkRouteFrameReceived+0x70>
     d76:	96 81       	ldd	r25, Z+6	; 0x06
     d78:	de 01       	movw	r26, r28
     d7a:	ad 57       	subi	r26, 0x7D	; 125
     d7c:	bf 4f       	sbci	r27, 0xFF	; 255
     d7e:	8c 91       	ld	r24, X
     d80:	98 17       	cp	r25, r24
     d82:	f0 f2       	brcs	.-68     	; 0xd40 <nwkRouteFrameReceived+0x4e>
     d84:	ee cf       	rjmp	.-36     	; 0xd62 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	08 95       	ret

00000d90 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     d96:	87 85       	ldd	r24, Z+15	; 0x0f
     d98:	90 89       	ldd	r25, Z+16	; 0x10
     d9a:	8f 3f       	cpi	r24, 0xFF	; 255
     d9c:	2f ef       	ldi	r18, 0xFF	; 255
     d9e:	92 07       	cpc	r25, r18
     da0:	d9 f1       	breq	.+118    	; 0xe18 <nwkRouteFrameSent+0x88>
     da2:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     da4:	63 85       	ldd	r22, Z+11	; 0x0b
     da6:	63 fb       	bst	r22, 3
     da8:	66 27       	eor	r22, r22
     daa:	60 f9       	bld	r22, 0
     dac:	35 df       	rcall	.-406    	; 0xc18 <NWK_RouteFindEntry>
     dae:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     db0:	89 2b       	or	r24, r25
     db2:	91 f1       	breq	.+100    	; 0xe18 <nwkRouteFrameSent+0x88>
     db4:	8c 91       	ld	r24, X
     db6:	80 fd       	sbrc	r24, 0
     db8:	2f c0       	rjmp	.+94     	; 0xe18 <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     dba:	fe 01       	movw	r30, r28
     dbc:	ed 57       	subi	r30, 0x7D	; 125
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	80 81       	ld	r24, Z
     dc2:	81 11       	cpse	r24, r1
     dc4:	19 c0       	rjmp	.+50     	; 0xdf8 <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     dc6:	8c 91       	ld	r24, X
     dc8:	8f 70       	andi	r24, 0x0F	; 15
     dca:	80 63       	ori	r24, 0x30	; 48
     dcc:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     dce:	15 96       	adiw	r26, 0x05	; 5
     dd0:	8c 91       	ld	r24, X
     dd2:	15 97       	sbiw	r26, 0x05	; 5
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	15 96       	adiw	r26, 0x05	; 5
     dd8:	8c 93       	st	X, r24
     dda:	8f 3f       	cpi	r24, 0xFF	; 255
     ddc:	e9 f4       	brne	.+58     	; 0xe18 <nwkRouteFrameSent+0x88>
     dde:	ec e1       	ldi	r30, 0x1C	; 28
     de0:	f7 e1       	ldi	r31, 0x17	; 23
     de2:	28 ed       	ldi	r18, 0xD8	; 216
     de4:	39 e1       	ldi	r19, 0x19	; 25
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     de6:	80 81       	ld	r24, Z
     de8:	86 95       	lsr	r24
     dea:	8f 5f       	subi	r24, 0xFF	; 255
     dec:	80 83       	st	Z, r24
     dee:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     df0:	e2 17       	cp	r30, r18
     df2:	f3 07       	cpc	r31, r19
     df4:	c1 f7       	brne	.-16     	; 0xde6 <nwkRouteFrameSent+0x56>
     df6:	10 c0       	rjmp	.+32     	; 0xe18 <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     df8:	9c 91       	ld	r25, X
     dfa:	89 2f       	mov	r24, r25
     dfc:	82 95       	swap	r24
     dfe:	8f 70       	andi	r24, 0x0F	; 15
     e00:	81 5f       	subi	r24, 0xF1	; 241
     e02:	8f 70       	andi	r24, 0x0F	; 15
     e04:	28 2f       	mov	r18, r24
     e06:	22 95       	swap	r18
     e08:	20 7f       	andi	r18, 0xF0	; 240
     e0a:	9f 70       	andi	r25, 0x0F	; 15
     e0c:	92 2b       	or	r25, r18
     e0e:	9c 93       	st	X, r25
     e10:	81 11       	cpse	r24, r1
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     e14:	cd 01       	movw	r24, r26
     e16:	54 df       	rcall	.-344    	; 0xcc0 <NWK_RouteFreeEntry>
  }
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	08 95       	ret

00000e1e <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     e24:	87 85       	ldd	r24, Z+15	; 0x0f
     e26:	90 89       	ldd	r25, Z+16	; 0x10
     e28:	8f 3f       	cpi	r24, 0xFF	; 255
     e2a:	2f ef       	ldi	r18, 0xFF	; 255
     e2c:	92 07       	cpc	r25, r18
     e2e:	29 f4       	brne	.+10     	; 0xe3a <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	9f ef       	ldi	r25, 0xFF	; 255
     e34:	90 87       	std	Z+8, r25	; 0x08
     e36:	87 83       	std	Z+7, r24	; 0x07
     e38:	0e c0       	rjmp	.+28     	; 0xe56 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     e3a:	23 85       	ldd	r18, Z+11	; 0x0b
     e3c:	22 ff       	sbrs	r18, 2
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     e40:	90 87       	std	Z+8, r25	; 0x08
     e42:	87 83       	std	Z+7, r24	; 0x07
     e44:	08 c0       	rjmp	.+16     	; 0xe56 <nwkRoutePrepareTx+0x38>
     e46:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     e48:	63 85       	ldd	r22, Z+11	; 0x0b
     e4a:	63 fb       	bst	r22, 3
     e4c:	66 27       	eor	r22, r22
     e4e:	60 f9       	bld	r22, 0
     e50:	41 df       	rcall	.-382    	; 0xcd4 <NWK_RouteNextHop>
     e52:	98 87       	std	Y+8, r25	; 0x08
     e54:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     e5c:	af 92       	push	r10
     e5e:	bf 92       	push	r11
     e60:	cf 92       	push	r12
     e62:	df 92       	push	r13
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     e70:	1b 85       	ldd	r17, Y+11	; 0x0b
     e72:	13 fb       	bst	r17, 3
     e74:	11 27       	eor	r17, r17
     e76:	10 f9       	bld	r17, 0
     e78:	cf 84       	ldd	r12, Y+15	; 0x0f
     e7a:	d8 88       	ldd	r13, Y+16	; 0x10
     e7c:	61 2f       	mov	r22, r17
     e7e:	c6 01       	movw	r24, r12
     e80:	29 df       	rcall	.-430    	; 0xcd4 <NWK_RouteNextHop>
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	59 f0       	breq	.+22     	; 0xe9c <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     e86:	fe 01       	movw	r30, r28
     e88:	e9 57       	subi	r30, 0x79	; 121
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	11 82       	std	Z+1, r1	; 0x01
     e8e:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     e90:	31 97       	sbiw	r30, 0x01	; 1
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     e96:	ce 01       	movw	r24, r28
     e98:	6e d3       	rcall	.+1756   	; 0x1576 <nwkTxFrame>
     e9a:	22 c0       	rjmp	.+68     	; 0xee0 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     e9c:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     e9e:	be 84       	ldd	r11, Y+14	; 0x0e
     ea0:	1f de       	rcall	.-962    	; 0xae0 <nwkFrameAlloc>
     ea2:	7c 01       	movw	r14, r24
     ea4:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     ea6:	d1 f0       	breq	.+52     	; 0xedc <nwkRouteFrame+0x80>
     ea8:	83 de       	rcall	.-762    	; 0xbb0 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     eaa:	f7 01       	movw	r30, r14
     eac:	81 81       	ldd	r24, Z+1	; 0x01
     eae:	8a 5f       	subi	r24, 0xFA	; 250
     eb0:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     eb2:	e9 57       	subi	r30, 0x79	; 121
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	11 82       	std	Z+1, r1	; 0x01
     eb8:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     eba:	f7 01       	movw	r30, r14
     ebc:	b0 8a       	std	Z+16, r11	; 0x10
     ebe:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     ec0:	ef 57       	subi	r30, 0x7F	; 127
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	01 90       	ld	r0, Z+
     ec6:	f0 81       	ld	r31, Z
     ec8:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	80 83       	st	Z, r24
  command->srcAddr = src;
     ece:	b2 82       	std	Z+2, r11	; 0x02
     ed0:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     ed2:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     ed4:	c3 82       	std	Z+3, r12	; 0x03
     ed6:	15 83       	std	Z+5, r17	; 0x05
     ed8:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     eda:	4d d3       	rcall	.+1690   	; 0x1576 <nwkTxFrame>
     edc:	ce 01       	movw	r24, r28
     ede:	39 de       	rcall	.-910    	; 0xb52 <nwkFrameFree>
  }
}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	bf 90       	pop	r11
     ef0:	af 90       	pop	r10
     ef2:	08 95       	ret

00000ef4 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     ef4:	fc 01       	movw	r30, r24
     ef6:	21 85       	ldd	r18, Z+9	; 0x09
     ef8:	26 30       	cpi	r18, 0x06	; 6
     efa:	49 f4       	brne	.+18     	; 0xf0e <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     efc:	07 80       	ldd	r0, Z+7	; 0x07
     efe:	f0 85       	ldd	r31, Z+8	; 0x08
     f00:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     f02:	65 81       	ldd	r22, Z+5	; 0x05
     f04:	83 81       	ldd	r24, Z+3	; 0x03
     f06:	94 81       	ldd	r25, Z+4	; 0x04
     f08:	ef de       	rcall	.-546    	; 0xce8 <nwkRouteRemove>

  return true;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     f0e:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     f10:	08 95       	ret

00000f12 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     f12:	dc 01       	movw	r26, r24
     f14:	19 96       	adiw	r26, 0x09	; 9
     f16:	2c 91       	ld	r18, X
     f18:	19 97       	sbiw	r26, 0x09	; 9
     f1a:	22 23       	and	r18, r18
     f1c:	71 f0       	breq	.+28     	; 0xf3a <nwkRxServiceDataInd+0x28>
     f1e:	17 96       	adiw	r26, 0x07	; 7
     f20:	ed 91       	ld	r30, X+
     f22:	fc 91       	ld	r31, X
     f24:	18 97       	sbiw	r26, 0x08	; 8
     f26:	20 81       	ld	r18, Z
     f28:	22 23       	and	r18, r18
     f2a:	19 f0       	breq	.+6      	; 0xf32 <nwkRxServiceDataInd+0x20>
     f2c:	21 30       	cpi	r18, 0x01	; 1
     f2e:	19 f0       	breq	.+6      	; 0xf36 <nwkRxServiceDataInd+0x24>
     f30:	06 c0       	rjmp	.+12     	; 0xf3e <nwkRxServiceDataInd+0x2c>
     f32:	b2 c3       	rjmp	.+1892   	; 0x1698 <nwkTxAckReceived>
     f34:	08 95       	ret
     f36:	de cf       	rjmp	.-68     	; 0xef4 <nwkRouteErrorReceived>
     f38:	08 95       	ret
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	08 95       	ret
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	08 95       	ret

00000f42 <nwkRxDuplicateRejectionTimerHandler>:
     f42:	bc 01       	movw	r22, r24
     f44:	e5 ee       	ldi	r30, 0xE5	; 229
     f46:	f9 e1       	ldi	r31, 0x19	; 25
     f48:	27 e1       	ldi	r18, 0x17	; 23
     f4a:	3a e1       	ldi	r19, 0x1A	; 26
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	51 e0       	ldi	r21, 0x01	; 1
     f50:	90 81       	ld	r25, Z
     f52:	99 23       	and	r25, r25
     f54:	19 f0       	breq	.+6      	; 0xf5c <nwkRxDuplicateRejectionTimerHandler+0x1a>
     f56:	91 50       	subi	r25, 0x01	; 1
     f58:	90 83       	st	Z, r25
     f5a:	45 2f       	mov	r20, r21
     f5c:	35 96       	adiw	r30, 0x05	; 5
     f5e:	e2 17       	cp	r30, r18
     f60:	f3 07       	cpc	r31, r19
     f62:	b1 f7       	brne	.-20     	; 0xf50 <nwkRxDuplicateRejectionTimerHandler+0xe>
     f64:	44 23       	and	r20, r20
     f66:	11 f0       	breq	.+4      	; 0xf6c <nwkRxDuplicateRejectionTimerHandler+0x2a>
     f68:	cb 01       	movw	r24, r22
     f6a:	6d c6       	rjmp	.+3290   	; 0x1c46 <SYS_TimerStart>
     f6c:	08 95       	ret

00000f6e <nwkRxInit>:
     f6e:	e5 ee       	ldi	r30, 0xE5	; 229
     f70:	f9 e1       	ldi	r31, 0x19	; 25
     f72:	87 e1       	ldi	r24, 0x17	; 23
     f74:	9a e1       	ldi	r25, 0x1A	; 26
     f76:	10 82       	st	Z, r1
     f78:	35 96       	adiw	r30, 0x05	; 5
     f7a:	e8 17       	cp	r30, r24
     f7c:	f9 07       	cpc	r31, r25
     f7e:	d9 f7       	brne	.-10     	; 0xf76 <nwkRxInit+0x8>
     f80:	e3 ed       	ldi	r30, 0xD3	; 211
     f82:	f9 e1       	ldi	r31, 0x19	; 25
     f84:	84 e6       	ldi	r24, 0x64	; 100
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a0 e0       	ldi	r26, 0x00	; 0
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	86 83       	std	Z+6, r24	; 0x06
     f8e:	97 83       	std	Z+7, r25	; 0x07
     f90:	a0 87       	std	Z+8, r26	; 0x08
     f92:	b1 87       	std	Z+9, r27	; 0x09
     f94:	12 86       	std	Z+10, r1	; 0x0a
     f96:	81 ea       	ldi	r24, 0xA1	; 161
     f98:	97 e0       	ldi	r25, 0x07	; 7
     f9a:	94 87       	std	Z+12, r25	; 0x0c
     f9c:	83 87       	std	Z+11, r24	; 0x0b
     f9e:	69 e8       	ldi	r22, 0x89	; 137
     fa0:	77 e0       	ldi	r23, 0x07	; 7
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	96 cc       	rjmp	.-1748   	; 0x8d2 <NWK_OpenEndpoint>
     fa6:	08 95       	ret

00000fa8 <PHY_DataInd>:
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	dc 01       	movw	r26, r24
     fae:	ed 91       	ld	r30, X+
     fb0:	fc 91       	ld	r31, X
     fb2:	11 97       	sbiw	r26, 0x01	; 1
     fb4:	21 81       	ldd	r18, Z+1	; 0x01
     fb6:	28 38       	cpi	r18, 0x88	; 136
     fb8:	f1 f4       	brne	.+60     	; 0xff6 <PHY_DataInd+0x4e>
     fba:	20 81       	ld	r18, Z
     fbc:	2f 7d       	andi	r18, 0xDF	; 223
     fbe:	21 34       	cpi	r18, 0x41	; 65
     fc0:	d1 f4       	brne	.+52     	; 0xff6 <PHY_DataInd+0x4e>
     fc2:	12 96       	adiw	r26, 0x02	; 2
     fc4:	2c 91       	ld	r18, X
     fc6:	20 31       	cpi	r18, 0x10	; 16
     fc8:	b0 f0       	brcs	.+44     	; 0xff6 <PHY_DataInd+0x4e>
     fca:	ec 01       	movw	r28, r24
     fcc:	89 dd       	rcall	.-1262   	; 0xae0 <nwkFrameAlloc>
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	91 f0       	breq	.+36     	; 0xff6 <PHY_DataInd+0x4e>
     fd2:	20 e2       	ldi	r18, 0x20	; 32
     fd4:	fc 01       	movw	r30, r24
     fd6:	20 83       	st	Z, r18
     fd8:	2a 81       	ldd	r18, Y+2	; 0x02
     fda:	21 83       	std	Z+1, r18	; 0x01
     fdc:	2b 81       	ldd	r18, Y+3	; 0x03
     fde:	ed 57       	subi	r30, 0x7D	; 125
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	20 83       	st	Z, r18
     fe4:	2c 81       	ldd	r18, Y+4	; 0x04
     fe6:	31 96       	adiw	r30, 0x01	; 1
     fe8:	20 83       	st	Z, r18
     fea:	4a 81       	ldd	r20, Y+2	; 0x02
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	68 81       	ld	r22, Y
     ff0:	79 81       	ldd	r23, Y+1	; 0x01
     ff2:	02 96       	adiw	r24, 0x02	; 2
     ff4:	3d d7       	rcall	.+3706   	; 0x1e70 <memcpy>
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     ffc:	2f 92       	push	r2
     ffe:	3f 92       	push	r3
    1000:	4f 92       	push	r4
    1002:	5f 92       	push	r5
    1004:	6f 92       	push	r6
    1006:	7f 92       	push	r7
    1008:	8f 92       	push	r8
    100a:	9f 92       	push	r9
    100c:	af 92       	push	r10
    100e:	bf 92       	push	r11
    1010:	cf 92       	push	r12
    1012:	df 92       	push	r13
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	2c 97       	sbiw	r28, 0x0c	; 12
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
    1030:	00 e0       	ldi	r16, 0x00	; 0
    1032:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1034:	0f 2e       	mov	r0, r31
    1036:	f4 e2       	ldi	r31, 0x24	; 36
    1038:	bf 2e       	mov	r11, r31
    103a:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    103c:	0f 2e       	mov	r0, r31
    103e:	f7 eb       	ldi	r31, 0xB7	; 183
    1040:	ef 2e       	mov	r14, r31
    1042:	fa e1       	ldi	r31, 0x1A	; 26
    1044:	ff 2e       	mov	r15, r31
    1046:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    1048:	55 24       	eor	r5, r5
    104a:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    104c:	68 94       	set
    104e:	aa 24       	eor	r10, r10
    1050:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1052:	68 94       	set
    1054:	77 24       	eor	r7, r7
    1056:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1058:	68 94       	set
    105a:	66 24       	eor	r6, r6
    105c:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    105e:	31 2c       	mov	r3, r1
    1060:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1062:	0f 2e       	mov	r0, r31
    1064:	ff e1       	ldi	r31, 0x1F	; 31
    1066:	4f 2e       	mov	r4, r31
    1068:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    106a:	cc 24       	eor	r12, r12
    106c:	c3 94       	inc	r12
    106e:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1070:	da c1       	rjmp	.+948    	; 0x1426 <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
    1072:	d8 01       	movw	r26, r16
    1074:	8c 91       	ld	r24, X
    1076:	82 32       	cpi	r24, 0x22	; 34
    1078:	09 f4       	brne	.+2      	; 0x107c <nwkRxTaskHandler+0x80>
    107a:	05 c1       	rjmp	.+522    	; 0x1286 <nwkRxTaskHandler+0x28a>
    107c:	18 f4       	brcc	.+6      	; 0x1084 <nwkRxTaskHandler+0x88>
    107e:	80 32       	cpi	r24, 0x20	; 32
    1080:	41 f0       	breq	.+16     	; 0x1092 <nwkRxTaskHandler+0x96>
    1082:	d1 c1       	rjmp	.+930    	; 0x1426 <nwkRxTaskHandler+0x42a>
    1084:	83 32       	cpi	r24, 0x23	; 35
    1086:	09 f4       	brne	.+2      	; 0x108a <nwkRxTaskHandler+0x8e>
    1088:	c9 c1       	rjmp	.+914    	; 0x141c <nwkRxTaskHandler+0x420>
    108a:	84 32       	cpi	r24, 0x24	; 36
    108c:	09 f4       	brne	.+2      	; 0x1090 <nwkRxTaskHandler+0x94>
    108e:	c9 c1       	rjmp	.+914    	; 0x1422 <nwkRxTaskHandler+0x426>
    1090:	ca c1       	rjmp	.+916    	; 0x1426 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
    1092:	f8 01       	movw	r30, r16
    1094:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    1096:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    1098:	98 2f       	mov	r25, r24
    109a:	9a 70       	andi	r25, 0x0A	; 10
    109c:	09 f0       	breq	.+2      	; 0x10a0 <nwkRxTaskHandler+0xa4>
    109e:	c3 c1       	rjmp	.+902    	; 0x1426 <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    10a0:	25 81       	ldd	r18, Z+5	; 0x05
    10a2:	36 81       	ldd	r19, Z+6	; 0x06
    10a4:	2f 3f       	cpi	r18, 0xFF	; 255
    10a6:	3f 4f       	sbci	r19, 0xFF	; 255
    10a8:	91 f4       	brne	.+36     	; 0x10ce <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    10aa:	d8 01       	movw	r26, r16
    10ac:	1f 96       	adiw	r26, 0x0f	; 15
    10ae:	8d 91       	ld	r24, X+
    10b0:	9c 91       	ld	r25, X
    10b2:	50 97       	sbiw	r26, 0x10	; 16
    10b4:	f7 01       	movw	r30, r14
    10b6:	20 81       	ld	r18, Z
    10b8:	31 81       	ldd	r19, Z+1	; 0x01
    10ba:	28 17       	cp	r18, r24
    10bc:	39 07       	cpc	r19, r25
    10be:	19 f0       	breq	.+6      	; 0x10c6 <nwkRxTaskHandler+0xca>
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <nwkRxTaskHandler+0xca>
    10c4:	b0 c1       	rjmp	.+864    	; 0x1426 <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    10c6:	e2 e2       	ldi	r30, 0x22	; 34
    10c8:	d8 01       	movw	r26, r16
    10ca:	ec 93       	st	X, r30
    10cc:	ac c1       	rjmp	.+856    	; 0x1426 <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    10ce:	d8 01       	movw	r26, r16
    10d0:	1f 96       	adiw	r26, 0x0f	; 15
    10d2:	2d 91       	ld	r18, X+
    10d4:	3c 91       	ld	r19, X
    10d6:	50 97       	sbiw	r26, 0x10	; 16
    10d8:	2f 3f       	cpi	r18, 0xFF	; 255
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <nwkRxTaskHandler+0xe6>
    10de:	80 fd       	sbrc	r24, 0
    10e0:	a2 c1       	rjmp	.+836    	; 0x1426 <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    10e2:	f7 01       	movw	r30, r14
    10e4:	20 81       	ld	r18, Z
    10e6:	31 81       	ldd	r19, Z+1	; 0x01
    10e8:	d8 01       	movw	r26, r16
    10ea:	1d 96       	adiw	r26, 0x0d	; 13
    10ec:	8d 91       	ld	r24, X+
    10ee:	9c 91       	ld	r25, X
    10f0:	1e 97       	sbiw	r26, 0x0e	; 14
    10f2:	28 17       	cp	r18, r24
    10f4:	39 07       	cpc	r19, r25
    10f6:	09 f4       	brne	.+2      	; 0x10fa <nwkRxTaskHandler+0xfe>
    10f8:	96 c1       	rjmp	.+812    	; 0x1426 <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    10fa:	c8 01       	movw	r24, r16
    10fc:	fa dd       	rcall	.-1036   	; 0xcf2 <nwkRouteFrameReceived>
    10fe:	e1 ee       	ldi	r30, 0xE1	; 225
    1100:	f9 e1       	ldi	r31, 0x19	; 25
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1106:	83 2c       	mov	r8, r3
    1108:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    110a:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    110c:	44 81       	ldd	r20, Z+4	; 0x04
    110e:	44 23       	and	r20, r20
    1110:	09 f4       	brne	.+2      	; 0x1114 <nwkRxTaskHandler+0x118>
    1112:	74 c0       	rjmp	.+232    	; 0x11fc <nwkRxTaskHandler+0x200>
    1114:	d8 01       	movw	r26, r16
    1116:	1d 96       	adiw	r26, 0x0d	; 13
    1118:	6d 91       	ld	r22, X+
    111a:	7c 91       	ld	r23, X
    111c:	1e 97       	sbiw	r26, 0x0e	; 14
    111e:	40 81       	ld	r20, Z
    1120:	51 81       	ldd	r21, Z+1	; 0x01
    1122:	64 17       	cp	r22, r20
    1124:	75 07       	cpc	r23, r21
    1126:	09 f0       	breq	.+2      	; 0x112a <nwkRxTaskHandler+0x12e>
    1128:	6a c0       	rjmp	.+212    	; 0x11fe <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    112a:	1c 96       	adiw	r26, 0x0c	; 12
    112c:	8c 91       	ld	r24, X
    112e:	1c 97       	sbiw	r26, 0x0c	; 12
    1130:	f9 01       	movw	r30, r18
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	e2 0f       	add	r30, r18
    113c:	f3 1f       	adc	r31, r19
    113e:	ef 51       	subi	r30, 0x1F	; 31
    1140:	f6 4e       	sbci	r31, 0xE6	; 230
    1142:	92 81       	ldd	r25, Z+2	; 0x02
    1144:	98 1b       	sub	r25, r24

      if (diff < 8)
    1146:	98 30       	cpi	r25, 0x08	; 8
    1148:	08 f0       	brcs	.+2      	; 0x114c <nwkRxTaskHandler+0x150>
    114a:	3e c0       	rjmp	.+124    	; 0x11c8 <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
    114c:	f9 01       	movw	r30, r18
    114e:	ee 0f       	add	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	e2 0f       	add	r30, r18
    1158:	f3 1f       	adc	r31, r19
    115a:	ef 51       	subi	r30, 0x1F	; 31
    115c:	f6 4e       	sbci	r31, 0xE6	; 230
    115e:	83 81       	ldd	r24, Z+3	; 0x03
    1160:	48 2f       	mov	r20, r24
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	09 2e       	mov	r0, r25
    1166:	02 c0       	rjmp	.+4      	; 0x116c <nwkRxTaskHandler+0x170>
    1168:	55 95       	asr	r21
    116a:	47 95       	ror	r20
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <nwkRxTaskHandler+0x16c>
    1170:	40 ff       	sbrs	r20, 0
    1172:	17 c0       	rjmp	.+46     	; 0x11a2 <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    1174:	f7 01       	movw	r30, r14
    1176:	20 81       	ld	r18, Z
    1178:	31 81       	ldd	r19, Z+1	; 0x01
    117a:	17 96       	adiw	r26, 0x07	; 7
    117c:	8d 91       	ld	r24, X+
    117e:	9c 91       	ld	r25, X
    1180:	18 97       	sbiw	r26, 0x08	; 8
    1182:	28 17       	cp	r18, r24
    1184:	39 07       	cpc	r19, r25
    1186:	09 f0       	breq	.+2      	; 0x118a <nwkRxTaskHandler+0x18e>
    1188:	4e c1       	rjmp	.+668    	; 0x1426 <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    118a:	1b 96       	adiw	r26, 0x0b	; 11
    118c:	6c 91       	ld	r22, X
    118e:	1b 97       	sbiw	r26, 0x0b	; 11
    1190:	63 fb       	bst	r22, 3
    1192:	66 27       	eor	r22, r22
    1194:	60 f9       	bld	r22, 0
    1196:	1f 96       	adiw	r26, 0x0f	; 15
    1198:	8d 91       	ld	r24, X+
    119a:	9c 91       	ld	r25, X
    119c:	50 97       	sbiw	r26, 0x10	; 16
    119e:	a4 dd       	rcall	.-1208   	; 0xce8 <nwkRouteRemove>
    11a0:	42 c1       	rjmp	.+644    	; 0x1426 <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    11a2:	f9 01       	movw	r30, r18
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	ee 0f       	add	r30, r30
    11aa:	ff 1f       	adc	r31, r31
    11ac:	2e 0f       	add	r18, r30
    11ae:	3f 1f       	adc	r19, r31
    11b0:	f9 01       	movw	r30, r18
    11b2:	ef 51       	subi	r30, 0x1F	; 31
    11b4:	f6 4e       	sbci	r31, 0xE6	; 230
    11b6:	96 01       	movw	r18, r12
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <nwkRxTaskHandler+0x1c2>
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	9a 95       	dec	r25
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <nwkRxTaskHandler+0x1be>
    11c2:	82 2b       	or	r24, r18
    11c4:	83 83       	std	Z+3, r24	; 0x03
    11c6:	36 c1       	rjmp	.+620    	; 0x1434 <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    11c8:	f9 01       	movw	r30, r18
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	ee 0f       	add	r30, r30
    11d0:	ff 1f       	adc	r31, r31
    11d2:	2e 0f       	add	r18, r30
    11d4:	3f 1f       	adc	r19, r31
    11d6:	f9 01       	movw	r30, r18
    11d8:	ef 51       	subi	r30, 0x1F	; 31
    11da:	f6 4e       	sbci	r31, 0xE6	; 230
    11dc:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    11de:	83 81       	ldd	r24, Z+3	; 0x03
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	91 95       	neg	r25
    11e6:	a9 01       	movw	r20, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <nwkRxTaskHandler+0x1f2>
    11ea:	44 0f       	add	r20, r20
    11ec:	55 1f       	adc	r21, r21
    11ee:	9a 95       	dec	r25
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <nwkRxTaskHandler+0x1ee>
    11f2:	ca 01       	movw	r24, r20
    11f4:	81 60       	ori	r24, 0x01	; 1
    11f6:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    11f8:	44 82       	std	Z+4, r4	; 0x04
    11fa:	1c c1       	rjmp	.+568    	; 0x1434 <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    11fc:	4f 01       	movw	r8, r30
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1202:	8a 30       	cpi	r24, 0x0A	; 10
    1204:	91 05       	cpc	r25, r1
    1206:	09 f0       	breq	.+2      	; 0x120a <nwkRxTaskHandler+0x20e>
    1208:	80 cf       	rjmp	.-256    	; 0x110a <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    120a:	81 14       	cp	r8, r1
    120c:	91 04       	cpc	r9, r1
    120e:	09 f4       	brne	.+2      	; 0x1212 <nwkRxTaskHandler+0x216>
    1210:	0a c1       	rjmp	.+532    	; 0x1426 <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1212:	d8 01       	movw	r26, r16
    1214:	1d 96       	adiw	r26, 0x0d	; 13
    1216:	8d 91       	ld	r24, X+
    1218:	9c 91       	ld	r25, X
    121a:	1e 97       	sbiw	r26, 0x0e	; 14
    121c:	f4 01       	movw	r30, r8
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    1222:	1c 96       	adiw	r26, 0x0c	; 12
    1224:	8c 91       	ld	r24, X
    1226:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    1228:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    122a:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    122c:	83 ed       	ldi	r24, 0xD3	; 211
    122e:	99 e1       	ldi	r25, 0x19	; 25
    1230:	0a d5       	rcall	.+2580   	; 0x1c46 <SYS_TimerStart>
    1232:	00 c1       	rjmp	.+512    	; 0x1434 <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1234:	d7 01       	movw	r26, r14
    1236:	2d 91       	ld	r18, X+
    1238:	3c 91       	ld	r19, X
    123a:	f8 01       	movw	r30, r16
    123c:	87 85       	ldd	r24, Z+15	; 0x0f
    123e:	90 89       	ldd	r25, Z+16	; 0x10
    1240:	28 17       	cp	r18, r24
    1242:	39 07       	cpc	r19, r25
    1244:	81 f0       	breq	.+32     	; 0x1266 <nwkRxTaskHandler+0x26a>
    1246:	43 85       	ldd	r20, Z+11	; 0x0b
    1248:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    124a:	0b c0       	rjmp	.+22     	; 0x1262 <nwkRxTaskHandler+0x266>
    124c:	c8 01       	movw	r24, r16
    124e:	e1 d1       	rcall	.+962    	; 0x1612 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1250:	d7 01       	movw	r26, r14
    1252:	2d 91       	ld	r18, X+
    1254:	3c 91       	ld	r19, X
    1256:	f8 01       	movw	r30, r16
    1258:	87 85       	ldd	r24, Z+15	; 0x0f
    125a:	90 89       	ldd	r25, Z+16	; 0x10
    125c:	28 17       	cp	r18, r24
    125e:	39 07       	cpc	r19, r25
    1260:	11 f0       	breq	.+4      	; 0x1266 <nwkRxTaskHandler+0x26a>
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	21 f4       	brne	.+8      	; 0x126e <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1266:	e2 e2       	ldi	r30, 0x22	; 34
    1268:	d8 01       	movw	r26, r16
    126a:	ec 93       	st	X, r30
    126c:	dc c0       	rjmp	.+440    	; 0x1426 <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    126e:	d8 01       	movw	r26, r16
    1270:	17 96       	adiw	r26, 0x07	; 7
    1272:	8d 91       	ld	r24, X+
    1274:	9c 91       	ld	r25, X
    1276:	18 97       	sbiw	r26, 0x08	; 8
    1278:	82 17       	cp	r24, r18
    127a:	93 07       	cpc	r25, r19
    127c:	09 f0       	breq	.+2      	; 0x1280 <nwkRxTaskHandler+0x284>
    127e:	d3 c0       	rjmp	.+422    	; 0x1426 <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    1280:	e3 e2       	ldi	r30, 0x23	; 35
    1282:	ec 93       	st	X, r30
    1284:	d0 c0       	rjmp	.+416    	; 0x1426 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    1286:	10 92 e0 19 	sts	0x19E0, r1	; 0x8019e0 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    128a:	d8 01       	movw	r26, r16
    128c:	51 96       	adiw	r26, 0x11	; 17
    128e:	8c 91       	ld	r24, X
    1290:	51 97       	sbiw	r26, 0x11	; 17
    1292:	82 95       	swap	r24
    1294:	8f 70       	andi	r24, 0x0F	; 15
    1296:	e8 2f       	mov	r30, r24
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	e3 54       	subi	r30, 0x43	; 67
    12a0:	f5 4e       	sbci	r31, 0xE5	; 229
    12a2:	01 90       	ld	r0, Z+
    12a4:	f0 81       	ld	r31, Z
    12a6:	e0 2d       	mov	r30, r0
    12a8:	30 97       	sbiw	r30, 0x00	; 0
    12aa:	09 f4       	brne	.+2      	; 0x12ae <nwkRxTaskHandler+0x2b2>
    12ac:	60 c0       	rjmp	.+192    	; 0x136e <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    12ae:	1d 96       	adiw	r26, 0x0d	; 13
    12b0:	2d 91       	ld	r18, X+
    12b2:	3c 91       	ld	r19, X
    12b4:	1e 97       	sbiw	r26, 0x0e	; 14
    12b6:	3a 83       	std	Y+2, r19	; 0x02
    12b8:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    12ba:	1f 96       	adiw	r26, 0x0f	; 15
    12bc:	4d 91       	ld	r20, X+
    12be:	5c 91       	ld	r21, X
    12c0:	50 97       	sbiw	r26, 0x10	; 16
    12c2:	5c 83       	std	Y+4, r21	; 0x04
    12c4:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    12c6:	51 96       	adiw	r26, 0x11	; 17
    12c8:	9c 91       	ld	r25, X
    12ca:	51 97       	sbiw	r26, 0x11	; 17
    12cc:	9f 70       	andi	r25, 0x0F	; 15
    12ce:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    12d0:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    12d2:	af 57       	subi	r26, 0x7F	; 127
    12d4:	bf 4f       	sbci	r27, 0xFF	; 255
    12d6:	8d 91       	ld	r24, X+
    12d8:	9c 91       	ld	r25, X
    12da:	99 87       	std	Y+9, r25	; 0x09
    12dc:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    12de:	b8 01       	movw	r22, r16
    12e0:	6e 5f       	subi	r22, 0xFE	; 254
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    12e4:	86 1b       	sub	r24, r22
    12e6:	97 0b       	sbc	r25, r23
    12e8:	d8 01       	movw	r26, r16
    12ea:	11 96       	adiw	r26, 0x01	; 1
    12ec:	9c 91       	ld	r25, X
    12ee:	11 97       	sbiw	r26, 0x01	; 1
    12f0:	98 1b       	sub	r25, r24
    12f2:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    12f4:	ad 57       	subi	r26, 0x7D	; 125
    12f6:	bf 4f       	sbci	r27, 0xFF	; 255
    12f8:	8c 91       	ld	r24, X
    12fa:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    12fc:	11 96       	adiw	r26, 0x01	; 1
    12fe:	8c 91       	ld	r24, X
    1300:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1302:	d8 01       	movw	r26, r16
    1304:	1b 96       	adiw	r26, 0x0b	; 11
    1306:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1308:	69 2f       	mov	r22, r25
    130a:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    130c:	92 fd       	sbrc	r25, 2
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <nwkRxTaskHandler+0x318>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <nwkRxTaskHandler+0x31a>
    1314:	80 e2       	ldi	r24, 0x20	; 32
    1316:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1318:	93 fd       	sbrc	r25, 3
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <nwkRxTaskHandler+0x324>
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <nwkRxTaskHandler+0x326>
    1320:	90 e4       	ldi	r25, 0x40	; 64
    1322:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1324:	4f 3f       	cpi	r20, 0xFF	; 255
    1326:	5f 4f       	sbci	r21, 0xFF	; 255
    1328:	11 f0       	breq	.+4      	; 0x132e <nwkRxTaskHandler+0x332>
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <nwkRxTaskHandler+0x334>
    132e:	96 2d       	mov	r25, r6
    1330:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1332:	d8 01       	movw	r26, r16
    1334:	19 96       	adiw	r26, 0x09	; 9
    1336:	4d 91       	ld	r20, X+
    1338:	5c 91       	ld	r21, X
    133a:	1a 97       	sbiw	r26, 0x0a	; 10
    133c:	24 17       	cp	r18, r20
    133e:	35 07       	cpc	r19, r21
    1340:	11 f0       	breq	.+4      	; 0x1346 <nwkRxTaskHandler+0x34a>
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <nwkRxTaskHandler+0x34c>
    1346:	97 2d       	mov	r25, r7
    1348:	89 2b       	or	r24, r25
    134a:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    134c:	d8 01       	movw	r26, r16
    134e:	15 96       	adiw	r26, 0x05	; 5
    1350:	2d 91       	ld	r18, X+
    1352:	3c 91       	ld	r19, X
    1354:	16 97       	sbiw	r26, 0x06	; 6
    1356:	2f 3f       	cpi	r18, 0xFF	; 255
    1358:	3f 4f       	sbci	r19, 0xFF	; 255
    135a:	11 f0       	breq	.+4      	; 0x1360 <nwkRxTaskHandler+0x364>
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <nwkRxTaskHandler+0x366>
    1360:	9a 2d       	mov	r25, r10
    1362:	89 2b       	or	r24, r25
    1364:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1366:	ce 01       	movw	r24, r28
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	19 95       	eicall
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    136e:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    1370:	f8 01       	movw	r30, r16
    1372:	93 85       	ldd	r25, Z+11	; 0x0b
    1374:	90 ff       	sbrs	r25, 0
    ack = false;
    1376:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1378:	d8 01       	movw	r26, r16
    137a:	17 96       	adiw	r26, 0x07	; 7
    137c:	2d 91       	ld	r18, X+
    137e:	3c 91       	ld	r19, X
    1380:	18 97       	sbiw	r26, 0x08	; 8
    1382:	2f 3f       	cpi	r18, 0xFF	; 255
    1384:	3f 4f       	sbci	r19, 0xFF	; 255
    1386:	69 f4       	brne	.+26     	; 0x13a2 <nwkRxTaskHandler+0x3a6>
    1388:	f7 01       	movw	r30, r14
    138a:	40 81       	ld	r20, Z
    138c:	51 81       	ldd	r21, Z+1	; 0x01
    138e:	d8 01       	movw	r26, r16
    1390:	1f 96       	adiw	r26, 0x0f	; 15
    1392:	2d 91       	ld	r18, X+
    1394:	3c 91       	ld	r19, X
    1396:	50 97       	sbiw	r26, 0x10	; 16
    1398:	42 17       	cp	r20, r18
    139a:	53 07       	cpc	r21, r19
    139c:	11 f4       	brne	.+4      	; 0x13a2 <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    139e:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    13a0:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    13a2:	f8 01       	movw	r30, r16
    13a4:	25 81       	ldd	r18, Z+5	; 0x05
    13a6:	36 81       	ldd	r19, Z+6	; 0x06
    13a8:	2f 3f       	cpi	r18, 0xFF	; 255
    13aa:	3f 4f       	sbci	r19, 0xFF	; 255
    13ac:	a1 f1       	breq	.+104    	; 0x1416 <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    13ae:	d7 01       	movw	r26, r14
    13b0:	2d 91       	ld	r18, X+
    13b2:	3c 91       	ld	r19, X
    13b4:	2f 3f       	cpi	r18, 0xFF	; 255
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    13b8:	71 f1       	breq	.+92     	; 0x1416 <nwkRxTaskHandler+0x41a>
    13ba:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    13bc:	61 f1       	breq	.+88     	; 0x1416 <nwkRxTaskHandler+0x41a>
    13be:	90 db       	rcall	.-2272   	; 0xae0 <nwkFrameAlloc>
    13c0:	4c 01       	movw	r8, r24
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    13c4:	41 f1       	breq	.+80     	; 0x1416 <nwkRxTaskHandler+0x41a>
    13c6:	f4 db       	rcall	.-2072   	; 0xbb0 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    13c8:	f4 01       	movw	r30, r8
    13ca:	81 81       	ldd	r24, Z+1	; 0x01
    13cc:	8d 5f       	subi	r24, 0xFD	; 253
    13ce:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    13d0:	e9 57       	subi	r30, 0x79	; 121
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	11 82       	std	Z+1, r1	; 0x01
    13d6:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    13d8:	d8 01       	movw	r26, r16
    13da:	1b 96       	adiw	r26, 0x0b	; 11
    13dc:	8c 91       	ld	r24, X
    13de:	1b 97       	sbiw	r26, 0x0b	; 11
    13e0:	86 95       	lsr	r24
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	f4 01       	movw	r30, r8
    13e6:	93 85       	ldd	r25, Z+11	; 0x0b
    13e8:	80 fb       	bst	r24, 0
    13ea:	91 f9       	bld	r25, 1
    13ec:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    13ee:	1d 96       	adiw	r26, 0x0d	; 13
    13f0:	8d 91       	ld	r24, X+
    13f2:	9c 91       	ld	r25, X
    13f4:	1e 97       	sbiw	r26, 0x0e	; 14
    13f6:	90 8b       	std	Z+16, r25	; 0x10
    13f8:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    13fa:	ef 57       	subi	r30, 0x7F	; 127
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	01 90       	ld	r0, Z+
    1400:	f0 81       	ld	r31, Z
    1402:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    1404:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    1406:	80 91 e0 19 	lds	r24, 0x19E0	; 0x8019e0 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    140a:	82 83       	std	Z+2, r24	; 0x02
    140c:	1c 96       	adiw	r26, 0x0c	; 12
    140e:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    1410:	81 83       	std	Z+1, r24	; 0x01
    1412:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1414:	b0 d0       	rcall	.+352    	; 0x1576 <nwkTxFrame>
    1416:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    1418:	bc 92       	st	X, r11
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <nwkRxTaskHandler+0x42a>
    141c:	c8 01       	movw	r24, r16
      } break;
    141e:	1e dd       	rcall	.-1476   	; 0xe5c <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <nwkRxTaskHandler+0x42a>
    1422:	c8 01       	movw	r24, r16
    1424:	96 db       	rcall	.-2260   	; 0xb52 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1426:	c8 01       	movw	r24, r16
    1428:	9e db       	rcall	.-2244   	; 0xb66 <nwkFrameNext>
    142a:	8c 01       	movw	r16, r24
    142c:	89 2b       	or	r24, r25
    142e:	09 f0       	breq	.+2      	; 0x1432 <nwkRxTaskHandler+0x436>
    1430:	20 ce       	rjmp	.-960    	; 0x1072 <nwkRxTaskHandler+0x76>
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <nwkRxTaskHandler+0x446>
    1434:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1436:	87 81       	ldd	r24, Z+7	; 0x07
    1438:	90 85       	ldd	r25, Z+8	; 0x08
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	09 f0       	breq	.+2      	; 0x1440 <nwkRxTaskHandler+0x444>
    143e:	08 cf       	rjmp	.-496    	; 0x1250 <nwkRxTaskHandler+0x254>
    1440:	f9 ce       	rjmp	.-526    	; 0x1234 <nwkRxTaskHandler+0x238>
    1442:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	df 90       	pop	r13
    145c:	cf 90       	pop	r12
    145e:	bf 90       	pop	r11
    1460:	af 90       	pop	r10
    1462:	9f 90       	pop	r9
    1464:	8f 90       	pop	r8
    1466:	7f 90       	pop	r7
    1468:	6f 90       	pop	r6
    146a:	5f 90       	pop	r5
    146c:	4f 90       	pop	r4
    146e:	3f 90       	pop	r3
    1470:	2f 90       	pop	r2
    1472:	08 95       	ret

00001474 <nwkTxDelayTimerHandler>:
    1474:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    1476:	ff 92       	push	r15
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	7c 01       	movw	r14, r24
    1480:	10 e0       	ldi	r17, 0x00	; 0
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	01 e0       	ldi	r16, 0x01	; 1
    1488:	c3 e1       	ldi	r28, 0x13	; 19
    148a:	13 c0       	rjmp	.+38     	; 0x14b2 <nwkTxDelayTimerHandler+0x3e>
    148c:	fc 01       	movw	r30, r24
    148e:	20 81       	ld	r18, Z
    1490:	21 31       	cpi	r18, 0x11	; 17
    1492:	79 f4       	brne	.+30     	; 0x14b2 <nwkTxDelayTimerHandler+0x3e>
    1494:	ec 57       	subi	r30, 0x7C	; 124
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	20 81       	ld	r18, Z
    149a:	31 81       	ldd	r19, Z+1	; 0x01
    149c:	21 50       	subi	r18, 0x01	; 1
    149e:	31 09       	sbc	r19, r1
    14a0:	31 83       	std	Z+1, r19	; 0x01
    14a2:	20 83       	st	Z, r18
    14a4:	23 2b       	or	r18, r19
    14a6:	21 f4       	brne	.+8      	; 0x14b0 <nwkTxDelayTimerHandler+0x3c>
    14a8:	fc 01       	movw	r30, r24
    14aa:	c0 83       	st	Z, r28
    14ac:	10 2f       	mov	r17, r16
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <nwkTxDelayTimerHandler+0x3e>
    14b0:	10 2f       	mov	r17, r16
    14b2:	59 db       	rcall	.-2382   	; 0xb66 <nwkFrameNext>
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	51 f7       	brne	.-44     	; 0x148c <nwkTxDelayTimerHandler+0x18>
    14b8:	11 23       	and	r17, r17
    14ba:	11 f0       	breq	.+4      	; 0x14c0 <nwkTxDelayTimerHandler+0x4c>
    14bc:	c7 01       	movw	r24, r14
    14be:	c3 d3       	rcall	.+1926   	; 0x1c46 <SYS_TimerStart>
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	08 95       	ret

000014cc <nwkTxAckWaitTimerHandler>:
    14cc:	ef 92       	push	r14
    14ce:	ff 92       	push	r15
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	7c 01       	movw	r14, r24
    14da:	10 e0       	ldi	r17, 0x00	; 0
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	01 e0       	ldi	r16, 0x01	; 1
    14e2:	d7 e1       	ldi	r29, 0x17	; 23
    14e4:	c0 e1       	ldi	r28, 0x10	; 16
    14e6:	16 c0       	rjmp	.+44     	; 0x1514 <nwkTxAckWaitTimerHandler+0x48>
    14e8:	fc 01       	movw	r30, r24
    14ea:	20 81       	ld	r18, Z
    14ec:	26 31       	cpi	r18, 0x16	; 22
    14ee:	91 f4       	brne	.+36     	; 0x1514 <nwkTxAckWaitTimerHandler+0x48>
    14f0:	ec 57       	subi	r30, 0x7C	; 124
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	20 81       	ld	r18, Z
    14f6:	31 81       	ldd	r19, Z+1	; 0x01
    14f8:	21 50       	subi	r18, 0x01	; 1
    14fa:	31 09       	sbc	r19, r1
    14fc:	31 83       	std	Z+1, r19	; 0x01
    14fe:	20 83       	st	Z, r18
    1500:	23 2b       	or	r18, r19
    1502:	39 f4       	brne	.+14     	; 0x1512 <nwkTxAckWaitTimerHandler+0x46>
    1504:	fc 01       	movw	r30, r24
    1506:	d0 83       	st	Z, r29
    1508:	ed 57       	subi	r30, 0x7D	; 125
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	c0 83       	st	Z, r28
    150e:	10 2f       	mov	r17, r16
    1510:	01 c0       	rjmp	.+2      	; 0x1514 <nwkTxAckWaitTimerHandler+0x48>
    1512:	10 2f       	mov	r17, r16
    1514:	28 db       	rcall	.-2480   	; 0xb66 <nwkFrameNext>
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	39 f7       	brne	.-50     	; 0x14e8 <nwkTxAckWaitTimerHandler+0x1c>
    151a:	11 23       	and	r17, r17
    151c:	11 f0       	breq	.+4      	; 0x1522 <nwkTxAckWaitTimerHandler+0x56>
    151e:	c7 01       	movw	r24, r14
    1520:	92 d3       	rcall	.+1828   	; 0x1c46 <SYS_TimerStart>
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	08 95       	ret

00001530 <nwkTxInit>:
    1530:	10 92 2e 1a 	sts	0x1A2E, r1	; 0x801a2e <nwkTxPhyActiveFrame+0x1>
    1534:	10 92 2d 1a 	sts	0x1A2D, r1	; 0x801a2d <nwkTxPhyActiveFrame>
    1538:	e0 e2       	ldi	r30, 0x20	; 32
    153a:	fa e1       	ldi	r31, 0x1A	; 26
    153c:	82 e3       	ldi	r24, 0x32	; 50
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a0 e0       	ldi	r26, 0x00	; 0
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	86 83       	std	Z+6, r24	; 0x06
    1546:	97 83       	std	Z+7, r25	; 0x07
    1548:	a0 87       	std	Z+8, r26	; 0x08
    154a:	b1 87       	std	Z+9, r27	; 0x09
    154c:	12 86       	std	Z+10, r1	; 0x0a
    154e:	86 e6       	ldi	r24, 0x66	; 102
    1550:	9a e0       	ldi	r25, 0x0A	; 10
    1552:	94 87       	std	Z+12, r25	; 0x0c
    1554:	83 87       	std	Z+11, r24	; 0x0b
    1556:	e3 e1       	ldi	r30, 0x13	; 19
    1558:	fa e1       	ldi	r31, 0x1A	; 26
    155a:	8a e0       	ldi	r24, 0x0A	; 10
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a0 e0       	ldi	r26, 0x00	; 0
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	86 83       	std	Z+6, r24	; 0x06
    1564:	97 83       	std	Z+7, r25	; 0x07
    1566:	a0 87       	std	Z+8, r26	; 0x08
    1568:	b1 87       	std	Z+9, r27	; 0x09
    156a:	12 86       	std	Z+10, r1	; 0x0a
    156c:	8a e3       	ldi	r24, 0x3A	; 58
    156e:	9a e0       	ldi	r25, 0x0A	; 10
    1570:	94 87       	std	Z+12, r25	; 0x0c
    1572:	83 87       	std	Z+11, r24	; 0x0b
    1574:	08 95       	ret

00001576 <nwkTxFrame>:
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	ec 01       	movw	r28, r24
    157c:	fc 01       	movw	r30, r24
    157e:	ea 57       	subi	r30, 0x7A	; 122
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	80 81       	ld	r24, Z
    1584:	81 ff       	sbrs	r24, 1
    1586:	03 c0       	rjmp	.+6      	; 0x158e <nwkTxFrame+0x18>
    1588:	92 e1       	ldi	r25, 0x12	; 18
    158a:	98 83       	st	Y, r25
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <nwkTxFrame+0x1c>
    158e:	92 e1       	ldi	r25, 0x12	; 18
    1590:	98 83       	st	Y, r25
    1592:	fe 01       	movw	r30, r28
    1594:	ed 57       	subi	r30, 0x7D	; 125
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	10 82       	st	Z, r1
    159a:	80 ff       	sbrs	r24, 0
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <nwkTxFrame+0x32>
    159e:	2f ef       	ldi	r18, 0xFF	; 255
    15a0:	3f ef       	ldi	r19, 0xFF	; 255
    15a2:	3e 83       	std	Y+6, r19	; 0x06
    15a4:	2d 83       	std	Y+5, r18	; 0x05
    15a6:	06 c0       	rjmp	.+12     	; 0x15b4 <nwkTxFrame+0x3e>
    15a8:	20 91 b9 1a 	lds	r18, 0x1AB9	; 0x801ab9 <nwkIb+0x2>
    15ac:	30 91 ba 1a 	lds	r19, 0x1ABA	; 0x801aba <nwkIb+0x3>
    15b0:	3e 83       	std	Y+6, r19	; 0x06
    15b2:	2d 83       	std	Y+5, r18	; 0x05
    15b4:	85 70       	andi	r24, 0x05	; 5
    15b6:	19 f4       	brne	.+6      	; 0x15be <nwkTxFrame+0x48>
    15b8:	ce 01       	movw	r24, r28
    15ba:	31 dc       	rcall	.-1950   	; 0xe1e <nwkRoutePrepareTx>
    15bc:	04 c0       	rjmp	.+8      	; 0x15c6 <nwkTxFrame+0x50>
    15be:	8f 85       	ldd	r24, Y+15	; 0x0f
    15c0:	98 89       	ldd	r25, Y+16	; 0x10
    15c2:	98 87       	std	Y+8, r25	; 0x08
    15c4:	8f 83       	std	Y+7, r24	; 0x07
    15c6:	e7 eb       	ldi	r30, 0xB7	; 183
    15c8:	fa e1       	ldi	r31, 0x1A	; 26
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	9a 87       	std	Y+10, r25	; 0x0a
    15d0:	89 87       	std	Y+9, r24	; 0x09
    15d2:	85 81       	ldd	r24, Z+5	; 0x05
    15d4:	8f 5f       	subi	r24, 0xFF	; 255
    15d6:	85 83       	std	Z+5, r24	; 0x05
    15d8:	8c 83       	std	Y+4, r24	; 0x04
    15da:	8f 81       	ldd	r24, Y+7	; 0x07
    15dc:	98 85       	ldd	r25, Y+8	; 0x08
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	69 f4       	brne	.+26     	; 0x15fc <nwkTxFrame+0x86>
    15e2:	81 e4       	ldi	r24, 0x41	; 65
    15e4:	98 e8       	ldi	r25, 0x88	; 136
    15e6:	9b 83       	std	Y+3, r25	; 0x03
    15e8:	8a 83       	std	Y+2, r24	; 0x02
    15ea:	34 d4       	rcall	.+2152   	; 0x1e54 <rand>
    15ec:	cc 57       	subi	r28, 0x7C	; 124
    15ee:	df 4f       	sbci	r29, 0xFF	; 255
    15f0:	87 70       	andi	r24, 0x07	; 7
    15f2:	99 27       	eor	r25, r25
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	99 83       	std	Y+1, r25	; 0x01
    15f8:	88 83       	st	Y, r24
    15fa:	08 c0       	rjmp	.+16     	; 0x160c <nwkTxFrame+0x96>
    15fc:	81 e6       	ldi	r24, 0x61	; 97
    15fe:	98 e8       	ldi	r25, 0x88	; 136
    1600:	9b 83       	std	Y+3, r25	; 0x03
    1602:	8a 83       	std	Y+2, r24	; 0x02
    1604:	cc 57       	subi	r28, 0x7C	; 124
    1606:	df 4f       	sbci	r29, 0xFF	; 255
    1608:	19 82       	std	Y+1, r1	; 0x01
    160a:	18 82       	st	Y, r1
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	08 95       	ret

00001612 <nwkTxBroadcastFrame>:
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	8c 01       	movw	r16, r24
    161c:	61 da       	rcall	.-2878   	; 0xae0 <nwkFrameAlloc>
    161e:	ec 01       	movw	r28, r24
    1620:	89 2b       	or	r24, r25
    1622:	a9 f1       	breq	.+106    	; 0x168e <nwkTxBroadcastFrame+0x7c>
    1624:	82 e1       	ldi	r24, 0x12	; 18
    1626:	88 83       	st	Y, r24
    1628:	f8 01       	movw	r30, r16
    162a:	81 81       	ldd	r24, Z+1	; 0x01
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	fe 01       	movw	r30, r28
    1630:	ed 57       	subi	r30, 0x7D	; 125
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	10 82       	st	Z, r1
    1636:	0e d4       	rcall	.+2076   	; 0x1e54 <rand>
    1638:	fe 01       	movw	r30, r28
    163a:	ec 57       	subi	r30, 0x7C	; 124
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	87 70       	andi	r24, 0x07	; 7
    1640:	99 27       	eor	r25, r25
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	80 83       	st	Z, r24
    1648:	33 96       	adiw	r30, 0x03	; 3
    164a:	11 82       	std	Z+1, r1	; 0x01
    164c:	10 82       	st	Z, r1
    164e:	f8 01       	movw	r30, r16
    1650:	41 81       	ldd	r20, Z+1	; 0x01
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	b8 01       	movw	r22, r16
    1656:	6e 5f       	subi	r22, 0xFE	; 254
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	ce 01       	movw	r24, r28
    165c:	02 96       	adiw	r24, 0x02	; 2
    165e:	08 d4       	rcall	.+2064   	; 0x1e70 <memcpy>
    1660:	81 e4       	ldi	r24, 0x41	; 65
    1662:	98 e8       	ldi	r25, 0x88	; 136
    1664:	9b 83       	std	Y+3, r25	; 0x03
    1666:	8a 83       	std	Y+2, r24	; 0x02
    1668:	8f ef       	ldi	r24, 0xFF	; 255
    166a:	9f ef       	ldi	r25, 0xFF	; 255
    166c:	98 87       	std	Y+8, r25	; 0x08
    166e:	8f 83       	std	Y+7, r24	; 0x07
    1670:	f8 01       	movw	r30, r16
    1672:	85 81       	ldd	r24, Z+5	; 0x05
    1674:	96 81       	ldd	r25, Z+6	; 0x06
    1676:	9e 83       	std	Y+6, r25	; 0x06
    1678:	8d 83       	std	Y+5, r24	; 0x05
    167a:	e7 eb       	ldi	r30, 0xB7	; 183
    167c:	fa e1       	ldi	r31, 0x1A	; 26
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	9a 87       	std	Y+10, r25	; 0x0a
    1684:	89 87       	std	Y+9, r24	; 0x09
    1686:	85 81       	ldd	r24, Z+5	; 0x05
    1688:	8f 5f       	subi	r24, 0xFF	; 255
    168a:	85 83       	std	Z+5, r24	; 0x05
    168c:	8c 83       	std	Y+4, r24	; 0x04
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	08 95       	ret

00001698 <nwkTxAckReceived>:
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	fc 01       	movw	r30, r24
    169e:	21 85       	ldd	r18, Z+9	; 0x09
    16a0:	23 30       	cpi	r18, 0x03	; 3
    16a2:	d9 f4       	brne	.+54     	; 0x16da <nwkTxAckReceived+0x42>
    16a4:	10 c0       	rjmp	.+32     	; 0x16c6 <nwkTxAckReceived+0x2e>
    16a6:	fc 01       	movw	r30, r24
    16a8:	20 81       	ld	r18, Z
    16aa:	26 31       	cpi	r18, 0x16	; 22
    16ac:	89 f4       	brne	.+34     	; 0x16d0 <nwkTxAckReceived+0x38>
    16ae:	34 85       	ldd	r19, Z+12	; 0x0c
    16b0:	29 81       	ldd	r18, Y+1	; 0x01
    16b2:	32 13       	cpse	r19, r18
    16b4:	0d c0       	rjmp	.+26     	; 0x16d0 <nwkTxAckReceived+0x38>
    16b6:	27 e1       	ldi	r18, 0x17	; 23
    16b8:	20 83       	st	Z, r18
    16ba:	2a 81       	ldd	r18, Y+2	; 0x02
    16bc:	ea 57       	subi	r30, 0x7A	; 122
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	20 83       	st	Z, r18
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	0b c0       	rjmp	.+22     	; 0x16dc <nwkTxAckReceived+0x44>
    16c6:	fc 01       	movw	r30, r24
    16c8:	c7 81       	ldd	r28, Z+7	; 0x07
    16ca:	d0 85       	ldd	r29, Z+8	; 0x08
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	4a da       	rcall	.-2924   	; 0xb66 <nwkFrameNext>
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	41 f7       	brne	.-48     	; 0x16a6 <nwkTxAckReceived+0xe>
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <nwkTxAckReceived+0x44>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	08 95       	ret

000016e2 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    16e2:	e0 91 2d 1a 	lds	r30, 0x1A2D	; 0x801a2d <nwkTxPhyActiveFrame>
    16e6:	f0 91 2e 1a 	lds	r31, 0x1A2E	; 0x801a2e <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	21 f0       	breq	.+8      	; 0x16f6 <PHY_DataConf+0x14>
    16ee:	48 f0       	brcs	.+18     	; 0x1702 <PHY_DataConf+0x20>
    16f0:	82 30       	cpi	r24, 0x02	; 2
    16f2:	19 f0       	breq	.+6      	; 0x16fa <PHY_DataConf+0x18>
    16f4:	04 c0       	rjmp	.+8      	; 0x16fe <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    16f6:	80 e2       	ldi	r24, 0x20	; 32
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    16fa:	81 e2       	ldi	r24, 0x21	; 33
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1702:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1704:	df 01       	movw	r26, r30
    1706:	ad 57       	subi	r26, 0x7D	; 125
    1708:	bf 4f       	sbci	r27, 0xFF	; 255
    170a:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    170c:	85 e1       	ldi	r24, 0x15	; 21
    170e:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1710:	10 92 2e 1a 	sts	0x1A2E, r1	; 0x801a2e <nwkTxPhyActiveFrame+0x1>
    1714:	10 92 2d 1a 	sts	0x1A2D, r1	; 0x801a2d <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    1718:	e7 eb       	ldi	r30, 0xB7	; 183
    171a:	fa e1       	ldi	r31, 0x1A	; 26
    171c:	86 a1       	ldd	r24, Z+38	; 0x26
    171e:	97 a1       	ldd	r25, Z+39	; 0x27
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	97 a3       	std	Z+39, r25	; 0x27
    1724:	86 a3       	std	Z+38, r24	; 0x26
    1726:	08 95       	ret

00001728 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1728:	9f 92       	push	r9
    172a:	af 92       	push	r10
    172c:	bf 92       	push	r11
    172e:	cf 92       	push	r12
    1730:	df 92       	push	r13
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	0f 93       	push	r16
    1738:	1f 93       	push	r17
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    173e:	c0 e0       	ldi	r28, 0x00	; 0
    1740:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1742:	0f 2e       	mov	r0, r31
    1744:	f4 e1       	ldi	r31, 0x14	; 20
    1746:	af 2e       	mov	r10, r31
    1748:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    174a:	07 eb       	ldi	r16, 0xB7	; 183
    174c:	1a e1       	ldi	r17, 0x1A	; 26
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    174e:	0f 2e       	mov	r0, r31
    1750:	f7 e1       	ldi	r31, 0x17	; 23
    1752:	df 2e       	mov	r13, r31
    1754:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1756:	0f 2e       	mov	r0, r31
    1758:	f6 e1       	ldi	r31, 0x16	; 22
    175a:	9f 2e       	mov	r9, r31
    175c:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    175e:	0f 2e       	mov	r0, r31
    1760:	f9 e2       	ldi	r31, 0x29	; 41
    1762:	ef 2e       	mov	r14, r31
    1764:	f1 2c       	mov	r15, r1
    1766:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1768:	0f 2e       	mov	r0, r31
    176a:	f3 e1       	ldi	r31, 0x13	; 19
    176c:	cf 2e       	mov	r12, r31
    176e:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1770:	0f 2e       	mov	r0, r31
    1772:	f1 e1       	ldi	r31, 0x11	; 17
    1774:	bf 2e       	mov	r11, r31
    1776:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1778:	60 c0       	rjmp	.+192    	; 0x183a <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    177a:	88 81       	ld	r24, Y
    177c:	83 31       	cpi	r24, 0x13	; 19
    177e:	c1 f0       	breq	.+48     	; 0x17b0 <nwkTxTaskHandler+0x88>
    1780:	18 f4       	brcc	.+6      	; 0x1788 <nwkTxTaskHandler+0x60>
    1782:	82 31       	cpi	r24, 0x12	; 18
    1784:	39 f0       	breq	.+14     	; 0x1794 <nwkTxTaskHandler+0x6c>
    1786:	59 c0       	rjmp	.+178    	; 0x183a <nwkTxTaskHandler+0x112>
    1788:	85 31       	cpi	r24, 0x15	; 21
    178a:	49 f1       	breq	.+82     	; 0x17de <nwkTxTaskHandler+0xb6>
    178c:	87 31       	cpi	r24, 0x17	; 23
    178e:	09 f4       	brne	.+2      	; 0x1792 <nwkTxTaskHandler+0x6a>
    1790:	45 c0       	rjmp	.+138    	; 0x181c <nwkTxTaskHandler+0xf4>
    1792:	53 c0       	rjmp	.+166    	; 0x183a <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    1794:	fe 01       	movw	r30, r28
    1796:	ec 57       	subi	r30, 0x7C	; 124
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	80 81       	ld	r24, Z
    179c:	91 81       	ldd	r25, Z+1	; 0x01
    179e:	89 2b       	or	r24, r25
    17a0:	29 f0       	breq	.+10     	; 0x17ac <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    17a2:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    17a4:	83 e1       	ldi	r24, 0x13	; 19
    17a6:	9a e1       	ldi	r25, 0x1A	; 26
    17a8:	4e d2       	rcall	.+1180   	; 0x1c46 <SYS_TimerStart>
    17aa:	47 c0       	rjmp	.+142    	; 0x183a <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    17ac:	c8 82       	st	Y, r12
    17ae:	45 c0       	rjmp	.+138    	; 0x183a <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    17b0:	80 91 2d 1a 	lds	r24, 0x1A2D	; 0x801a2d <nwkTxPhyActiveFrame>
    17b4:	90 91 2e 1a 	lds	r25, 0x1A2E	; 0x801a2e <nwkTxPhyActiveFrame+0x1>
    17b8:	89 2b       	or	r24, r25
    17ba:	09 f0       	breq	.+2      	; 0x17be <nwkTxTaskHandler+0x96>
    17bc:	3e c0       	rjmp	.+124    	; 0x183a <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    17be:	d0 93 2e 1a 	sts	0x1A2E, r29	; 0x801a2e <nwkTxPhyActiveFrame+0x1>
    17c2:	c0 93 2d 1a 	sts	0x1A2D, r28	; 0x801a2d <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    17c6:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    17c8:	69 81       	ldd	r22, Y+1	; 0x01
    17ca:	ce 01       	movw	r24, r28
    17cc:	02 96       	adiw	r24, 0x02	; 2
    17ce:	cb d0       	rcall	.+406    	; 0x1966 <PHY_DataReq>
          nwkIb.lock++;
    17d0:	f8 01       	movw	r30, r16
    17d2:	86 a1       	ldd	r24, Z+38	; 0x26
    17d4:	97 a1       	ldd	r25, Z+39	; 0x27
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	97 a3       	std	Z+39, r25	; 0x27
    17da:	86 a3       	std	Z+38, r24	; 0x26
    17dc:	2e c0       	rjmp	.+92     	; 0x183a <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    17de:	fe 01       	movw	r30, r28
    17e0:	ed 57       	subi	r30, 0x7D	; 125
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	80 81       	ld	r24, Z
    17e6:	81 11       	cpse	r24, r1
    17e8:	17 c0       	rjmp	.+46     	; 0x1818 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    17ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    17ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    17ee:	f8 01       	movw	r30, r16
    17f0:	80 81       	ld	r24, Z
    17f2:	91 81       	ldd	r25, Z+1	; 0x01
    17f4:	28 17       	cp	r18, r24
    17f6:	39 07       	cpc	r19, r25
    17f8:	69 f4       	brne	.+26     	; 0x1814 <nwkTxTaskHandler+0xec>
    17fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    17fc:	80 ff       	sbrs	r24, 0
    17fe:	0a c0       	rjmp	.+20     	; 0x1814 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1800:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1802:	fe 01       	movw	r30, r28
    1804:	ec 57       	subi	r30, 0x7C	; 124
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	f1 82       	std	Z+1, r15	; 0x01
    180a:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    180c:	80 e2       	ldi	r24, 0x20	; 32
    180e:	9a e1       	ldi	r25, 0x1A	; 26
    1810:	1a d2       	rcall	.+1076   	; 0x1c46 <SYS_TimerStart>
    1812:	13 c0       	rjmp	.+38     	; 0x183a <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1814:	d8 82       	st	Y, r13
    1816:	11 c0       	rjmp	.+34     	; 0x183a <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1818:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    181a:	0f c0       	rjmp	.+30     	; 0x183a <nwkTxTaskHandler+0x112>
    181c:	ce 01       	movw	r24, r28
    181e:	b8 da       	rcall	.-2704   	; 0xd90 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    1820:	fe 01       	movw	r30, r28
    1822:	e9 57       	subi	r30, 0x79	; 121
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	01 90       	ld	r0, Z+
    1828:	f0 81       	ld	r31, Z
    182a:	e0 2d       	mov	r30, r0
    182c:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    182e:	19 f4       	brne	.+6      	; 0x1836 <nwkTxTaskHandler+0x10e>
    1830:	ce 01       	movw	r24, r28
    1832:	8f d9       	rcall	.-3298   	; 0xb52 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    1834:	02 c0       	rjmp	.+4      	; 0x183a <nwkTxTaskHandler+0x112>
    1836:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1838:	19 95       	eicall
    183a:	ce 01       	movw	r24, r28
    183c:	94 d9       	rcall	.-3288   	; 0xb66 <nwkFrameNext>
    183e:	ec 01       	movw	r28, r24
    1840:	89 2b       	or	r24, r25
    1842:	09 f0       	breq	.+2      	; 0x1846 <nwkTxTaskHandler+0x11e>
    1844:	9a cf       	rjmp	.-204    	; 0x177a <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	bf 90       	pop	r11
    1858:	af 90       	pop	r10
    185a:	9f 90       	pop	r9
    185c:	08 95       	ret

0000185e <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    185e:	80 91 2f 1a 	lds	r24, 0x1A2F	; 0x801a2f <phyBand>
    1862:	98 2f       	mov	r25, r24
    1864:	9f 70       	andi	r25, 0x0F	; 15
    1866:	e4 e5       	ldi	r30, 0x54	; 84
    1868:	f1 e0       	ldi	r31, 0x01	; 1
    186a:	80 81       	ld	r24, Z
    186c:	80 7f       	andi	r24, 0xF0	; 240
    186e:	89 2b       	or	r24, r25
    1870:	80 83       	st	Z, r24
    1872:	80 91 2f 1a 	lds	r24, 0x1A2F	; 0x801a2f <phyBand>
    1876:	88 23       	and	r24, r24
    1878:	29 f0       	breq	.+10     	; 0x1884 <phySetChannel+0x26>
    187a:	80 91 30 1a 	lds	r24, 0x1A30	; 0x801a30 <phyChannel>
    187e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    1882:	08 95       	ret
    1884:	80 91 30 1a 	lds	r24, 0x1A30	; 0x801a30 <phyChannel>
    1888:	98 2f       	mov	r25, r24
    188a:	9f 71       	andi	r25, 0x1F	; 31
    188c:	e8 e4       	ldi	r30, 0x48	; 72
    188e:	f1 e0       	ldi	r31, 0x01	; 1
    1890:	80 81       	ld	r24, Z
    1892:	80 7e       	andi	r24, 0xE0	; 224
    1894:	89 2b       	or	r24, r25
    1896:	80 83       	st	Z, r24
    1898:	08 95       	ret

0000189a <phyTrxSetState>:
    189a:	93 e0       	ldi	r25, 0x03	; 3
    189c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    18a0:	e1 e4       	ldi	r30, 0x41	; 65
    18a2:	f1 e0       	ldi	r31, 0x01	; 1
    18a4:	90 81       	ld	r25, Z
    18a6:	9f 71       	andi	r25, 0x1F	; 31
    18a8:	98 30       	cpi	r25, 0x08	; 8
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <phyTrxSetState+0xa>
    18ac:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    18b0:	e1 e4       	ldi	r30, 0x41	; 65
    18b2:	f1 e0       	ldi	r31, 0x01	; 1
    18b4:	90 81       	ld	r25, Z
    18b6:	9f 71       	andi	r25, 0x1F	; 31
    18b8:	89 13       	cpse	r24, r25
    18ba:	fc cf       	rjmp	.-8      	; 0x18b4 <phyTrxSetState+0x1a>
    18bc:	08 95       	ret

000018be <phySetRxState>:
    18be:	88 e0       	ldi	r24, 0x08	; 8
    18c0:	ec df       	rcall	.-40     	; 0x189a <phyTrxSetState>
    18c2:	8f ef       	ldi	r24, 0xFF	; 255
    18c4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    18c8:	80 91 31 1a 	lds	r24, 0x1A31	; 0x801a31 <phyRxState>
    18cc:	88 23       	and	r24, r24
    18ce:	11 f0       	breq	.+4      	; 0x18d4 <phySetRxState+0x16>
    18d0:	86 e1       	ldi	r24, 0x16	; 22
    18d2:	e3 cf       	rjmp	.-58     	; 0x189a <phyTrxSetState>
    18d4:	08 95       	ret

000018d6 <PHY_Init>:
    18d6:	e9 e3       	ldi	r30, 0x39	; 57
    18d8:	f1 e0       	ldi	r31, 0x01	; 1
    18da:	80 81       	ld	r24, Z
    18dc:	81 60       	ori	r24, 0x01	; 1
    18de:	80 83       	st	Z, r24
    18e0:	10 92 31 1a 	sts	0x1A31, r1	; 0x801a31 <phyRxState>
    18e4:	10 92 2f 1a 	sts	0x1A2F, r1	; 0x801a2f <phyBand>
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	80 93 b2 1a 	sts	0x1AB2, r24	; 0x801ab2 <phyState>
    18ee:	88 e0       	ldi	r24, 0x08	; 8
    18f0:	d4 df       	rcall	.-88     	; 0x189a <phyTrxSetState>
    18f2:	8b ee       	ldi	r24, 0xEB	; 235
    18f4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    18f8:	ec e4       	ldi	r30, 0x4C	; 76
    18fa:	f1 e0       	ldi	r31, 0x01	; 1
    18fc:	80 81       	ld	r24, Z
    18fe:	80 68       	ori	r24, 0x80	; 128
    1900:	80 83       	st	Z, r24
    1902:	08 95       	ret

00001904 <PHY_SetRxState>:
    1904:	80 93 31 1a 	sts	0x1A31, r24	; 0x801a31 <phyRxState>
    1908:	da cf       	rjmp	.-76     	; 0x18be <phySetRxState>
    190a:	08 95       	ret

0000190c <PHY_SetChannel>:
    190c:	80 93 30 1a 	sts	0x1A30, r24	; 0x801a30 <phyChannel>
    1910:	a6 cf       	rjmp	.-180    	; 0x185e <phySetChannel>
    1912:	08 95       	ret

00001914 <PHY_SetPanId>:
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	1f 92       	push	r1
    191a:	1f 92       	push	r1
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	08 95       	ret

00001938 <PHY_SetShortAddr>:
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	1f 92       	push	r1
    193e:	1f 92       	push	r1
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    1952:	99 81       	ldd	r25, Y+1	; 0x01
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	89 0f       	add	r24, r25
    1958:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	08 95       	ret

00001966 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	18 2f       	mov	r17, r24
    196e:	d9 2f       	mov	r29, r25
    1970:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    1972:	89 e1       	ldi	r24, 0x19	; 25
    1974:	92 df       	rcall	.-220    	; 0x189a <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    1976:	8f ef       	ldi	r24, 0xFF	; 255
    1978:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    197c:	82 e0       	ldi	r24, 0x02	; 2
    197e:	8c 0f       	add	r24, r28
    1980:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    1984:	cc 23       	and	r28, r28
    1986:	71 f0       	breq	.+28     	; 0x19a4 <PHY_DataReq+0x3e>
    1988:	a1 2f       	mov	r26, r17
    198a:	bd 2f       	mov	r27, r29
    198c:	c1 50       	subi	r28, 0x01	; 1
    198e:	6c 2f       	mov	r22, r28
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	6e 57       	subi	r22, 0x7E	; 126
    1994:	7e 4f       	sbci	r23, 0xFE	; 254
    1996:	e1 e8       	ldi	r30, 0x81	; 129
    1998:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    199a:	8d 91       	ld	r24, X+
    199c:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    199e:	e6 17       	cp	r30, r22
    19a0:	f7 07       	cpc	r31, r23
    19a2:	d9 f7       	brne	.-10     	; 0x199a <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	80 93 b2 1a 	sts	0x1AB2, r24	; 0x801ab2 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	08 95       	ret

000019b8 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <PHY_TaskHandler+0x8>
    19c0:	1f 92       	push	r1
    19c2:	1f 92       	push	r1
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    19c8:	80 91 b2 1a 	lds	r24, 0x1AB2	; 0x801ab2 <phyState>
    19cc:	82 30       	cpi	r24, 0x02	; 2
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <PHY_TaskHandler+0x1a>
    19d0:	65 c0       	rjmp	.+202    	; 0x1a9c <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    19d2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    19d6:	83 ff       	sbrs	r24, 3
    19d8:	3e c0       	rjmp	.+124    	; 0x1a56 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    19da:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    19de:	6a 2f       	mov	r22, r26
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	ab 01       	movw	r20, r22
    19e4:	4f 5f       	subi	r20, 0xFF	; 255
    19e6:	5f 4f       	sbci	r21, 0xFF	; 255
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    19ee:	fc 01       	movw	r30, r24
    19f0:	e0 58       	subi	r30, 0x80	; 128
    19f2:	fe 4f       	sbci	r31, 0xFE	; 254
    19f4:	30 81       	ld	r19, Z
    19f6:	fc 01       	movw	r30, r24
    19f8:	ee 5c       	subi	r30, 0xCE	; 206
    19fa:	f5 4e       	sbci	r31, 0xE5	; 229
    19fc:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    19fe:	2f 5f       	subi	r18, 0xFF	; 255
    1a00:	82 2f       	mov	r24, r18
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	84 17       	cp	r24, r20
    1a06:	95 07       	cpc	r25, r21
    1a08:	94 f3       	brlt	.-28     	; 0x19ee <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    1a0a:	82 e3       	ldi	r24, 0x32	; 50
    1a0c:	9a e1       	ldi	r25, 0x1A	; 26
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1a12:	a2 50       	subi	r26, 0x02	; 2
    1a14:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    1a16:	fb 01       	movw	r30, r22
    1a18:	ee 5c       	subi	r30, 0xCE	; 206
    1a1a:	f5 4e       	sbci	r31, 0xE5	; 229
    1a1c:	80 81       	ld	r24, Z
    1a1e:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1a20:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    1a24:	8a 55       	subi	r24, 0x5A	; 90
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    1a28:	ce 01       	movw	r24, r28
    1a2a:	01 96       	adiw	r24, 0x01	; 1
    1a2c:	bd da       	rcall	.-2694   	; 0xfa8 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    1a2e:	e1 e4       	ldi	r30, 0x41	; 65
    1a30:	f1 e0       	ldi	r31, 0x01	; 1
    1a32:	80 81       	ld	r24, Z
    1a34:	8f 71       	andi	r24, 0x1F	; 31
    1a36:	86 31       	cpi	r24, 0x16	; 22
    1a38:	e1 f7       	brne	.-8      	; 0x1a32 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    1a3a:	ef e4       	ldi	r30, 0x4F	; 79
    1a3c:	f1 e0       	ldi	r31, 0x01	; 1
    1a3e:	80 81       	ld	r24, Z
    1a40:	88 60       	ori	r24, 0x08	; 8
    1a42:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1a44:	ec e4       	ldi	r30, 0x4C	; 76
    1a46:	f1 e0       	ldi	r31, 0x01	; 1
    1a48:	80 81       	ld	r24, Z
    1a4a:	8f 77       	andi	r24, 0x7F	; 127
    1a4c:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1a4e:	80 81       	ld	r24, Z
    1a50:	80 68       	ori	r24, 0x80	; 128
    1a52:	80 83       	st	Z, r24
    1a54:	23 c0       	rjmp	.+70     	; 0x1a9c <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    1a56:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1a5a:	86 ff       	sbrs	r24, 6
    1a5c:	1f c0       	rjmp	.+62     	; 0x1a9c <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    1a5e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1a62:	8f 71       	andi	r24, 0x1F	; 31
    1a64:	89 31       	cpi	r24, 0x19	; 25
    1a66:	a9 f4       	brne	.+42     	; 0x1a92 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    1a68:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1a6c:	12 95       	swap	r17
    1a6e:	16 95       	lsr	r17
    1a70:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    1a72:	49 f0       	breq	.+18     	; 0x1a86 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    1a74:	13 30       	cpi	r17, 0x03	; 3
    1a76:	21 f0       	breq	.+8      	; 0x1a80 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    1a78:	15 30       	cpi	r17, 0x05	; 5
    1a7a:	21 f0       	breq	.+8      	; 0x1a84 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    1a7c:	13 e0       	ldi	r17, 0x03	; 3
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1a80:	11 e0       	ldi	r17, 0x01	; 1
    1a82:	01 c0       	rjmp	.+2      	; 0x1a86 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    1a84:	12 e0       	ldi	r17, 0x02	; 2
    1a86:	1b df       	rcall	.-458    	; 0x18be <phySetRxState>
      phyState = PHY_STATE_IDLE;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	80 93 b2 1a 	sts	0x1AB2, r24	; 0x801ab2 <phyState>

      PHY_DataConf(status);
    1a8e:	81 2f       	mov	r24, r17
    1a90:	28 de       	rcall	.-944    	; 0x16e2 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    1a92:	ef e4       	ldi	r30, 0x4F	; 79
    1a94:	f1 e0       	ldi	r31, 0x01	; 1
    1a96:	80 81       	ld	r24, Z
    1a98:	80 64       	ori	r24, 0x40	; 64
    1a9a:	80 83       	st	Z, r24
  }
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	08 95       	ret

00001aae <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1aae:	0e 94 a3 02 	call	0x546	; 0x546 <HAL_Init>
  SYS_TimerInit();
    1ab2:	6d d0       	rcall	.+218    	; 0x1b8e <SYS_TimerInit>
  PHY_Init();
    1ab4:	10 df       	rcall	.-480    	; 0x18d6 <PHY_Init>
    1ab6:	0c 94 44 04 	jmp	0x888	; 0x888 <NWK_Init>
  NWK_Init();
    1aba:	08 95       	ret

00001abc <SYS_TaskHandler>:
    1abc:	7d df       	rcall	.-262    	; 0x19b8 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    1abe:	0e 94 72 04 	call	0x8e4	; 0x8e4 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    1ac2:	cc c0       	rjmp	.+408    	; 0x1c5c <SYS_TimerTaskHandler>
    1ac4:	08 95       	ret

00001ac6 <placeTimer>:
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	ec 01       	movw	r28, r24
    1ad0:	80 91 b3 1a 	lds	r24, 0x1AB3	; 0x801ab3 <timers>
    1ad4:	90 91 b4 1a 	lds	r25, 0x1AB4	; 0x801ab4 <timers+0x1>
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	09 f4       	brne	.+2      	; 0x1ade <placeTimer+0x18>
    1adc:	45 c0       	rjmp	.+138    	; 0x1b68 <placeTimer+0xa2>
    1ade:	4e 81       	ldd	r20, Y+6	; 0x06
    1ae0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ae2:	68 85       	ldd	r22, Y+8	; 0x08
    1ae4:	79 85       	ldd	r23, Y+9	; 0x09
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	02 81       	ldd	r16, Z+2	; 0x02
    1aea:	13 81       	ldd	r17, Z+3	; 0x03
    1aec:	24 81       	ldd	r18, Z+4	; 0x04
    1aee:	35 81       	ldd	r19, Z+5	; 0x05
    1af0:	40 17       	cp	r20, r16
    1af2:	51 07       	cpc	r21, r17
    1af4:	62 07       	cpc	r22, r18
    1af6:	73 07       	cpc	r23, r19
    1af8:	60 f0       	brcs	.+24     	; 0x1b12 <placeTimer+0x4c>
    1afa:	dc 01       	movw	r26, r24
    1afc:	17 c0       	rjmp	.+46     	; 0x1b2c <placeTimer+0x66>
    1afe:	02 81       	ldd	r16, Z+2	; 0x02
    1b00:	13 81       	ldd	r17, Z+3	; 0x03
    1b02:	24 81       	ldd	r18, Z+4	; 0x04
    1b04:	35 81       	ldd	r19, Z+5	; 0x05
    1b06:	40 17       	cp	r20, r16
    1b08:	51 07       	cpc	r21, r17
    1b0a:	62 07       	cpc	r22, r18
    1b0c:	73 07       	cpc	r23, r19
    1b0e:	68 f4       	brcc	.+26     	; 0x1b2a <placeTimer+0x64>
    1b10:	03 c0       	rjmp	.+6      	; 0x1b18 <placeTimer+0x52>
    1b12:	fc 01       	movw	r30, r24
    1b14:	a0 e0       	ldi	r26, 0x00	; 0
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	04 1b       	sub	r16, r20
    1b1a:	15 0b       	sbc	r17, r21
    1b1c:	26 0b       	sbc	r18, r22
    1b1e:	37 0b       	sbc	r19, r23
    1b20:	02 83       	std	Z+2, r16	; 0x02
    1b22:	13 83       	std	Z+3, r17	; 0x03
    1b24:	24 83       	std	Z+4, r18	; 0x04
    1b26:	35 83       	std	Z+5, r19	; 0x05
    1b28:	0a c0       	rjmp	.+20     	; 0x1b3e <placeTimer+0x78>
    1b2a:	df 01       	movw	r26, r30
    1b2c:	40 1b       	sub	r20, r16
    1b2e:	51 0b       	sbc	r21, r17
    1b30:	62 0b       	sbc	r22, r18
    1b32:	73 0b       	sbc	r23, r19
    1b34:	ed 91       	ld	r30, X+
    1b36:	fc 91       	ld	r31, X
    1b38:	11 97       	sbiw	r26, 0x01	; 1
    1b3a:	30 97       	sbiw	r30, 0x00	; 0
    1b3c:	01 f7       	brne	.-64     	; 0x1afe <placeTimer+0x38>
    1b3e:	4a 83       	std	Y+2, r20	; 0x02
    1b40:	5b 83       	std	Y+3, r21	; 0x03
    1b42:	6c 83       	std	Y+4, r22	; 0x04
    1b44:	7d 83       	std	Y+5, r23	; 0x05
    1b46:	10 97       	sbiw	r26, 0x00	; 0
    1b48:	41 f0       	breq	.+16     	; 0x1b5a <placeTimer+0x94>
    1b4a:	8d 91       	ld	r24, X+
    1b4c:	9c 91       	ld	r25, X
    1b4e:	11 97       	sbiw	r26, 0x01	; 1
    1b50:	99 83       	std	Y+1, r25	; 0x01
    1b52:	88 83       	st	Y, r24
    1b54:	cd 93       	st	X+, r28
    1b56:	dc 93       	st	X, r29
    1b58:	15 c0       	rjmp	.+42     	; 0x1b84 <placeTimer+0xbe>
    1b5a:	99 83       	std	Y+1, r25	; 0x01
    1b5c:	88 83       	st	Y, r24
    1b5e:	d0 93 b4 1a 	sts	0x1AB4, r29	; 0x801ab4 <timers+0x1>
    1b62:	c0 93 b3 1a 	sts	0x1AB3, r28	; 0x801ab3 <timers>
    1b66:	0e c0       	rjmp	.+28     	; 0x1b84 <placeTimer+0xbe>
    1b68:	19 82       	std	Y+1, r1	; 0x01
    1b6a:	18 82       	st	Y, r1
    1b6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b70:	a8 85       	ldd	r26, Y+8	; 0x08
    1b72:	b9 85       	ldd	r27, Y+9	; 0x09
    1b74:	8a 83       	std	Y+2, r24	; 0x02
    1b76:	9b 83       	std	Y+3, r25	; 0x03
    1b78:	ac 83       	std	Y+4, r26	; 0x04
    1b7a:	bd 83       	std	Y+5, r27	; 0x05
    1b7c:	d0 93 b4 1a 	sts	0x1AB4, r29	; 0x801ab4 <timers+0x1>
    1b80:	c0 93 b3 1a 	sts	0x1AB3, r28	; 0x801ab3 <timers>
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	08 95       	ret

00001b8e <SYS_TimerInit>:
    1b8e:	10 92 b4 1a 	sts	0x1AB4, r1	; 0x801ab4 <timers+0x1>
    1b92:	10 92 b3 1a 	sts	0x1AB3, r1	; 0x801ab3 <timers>
    1b96:	08 95       	ret

00001b98 <SYS_TimerStop>:
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	a0 91 b3 1a 	lds	r26, 0x1AB3	; 0x801ab3 <timers>
    1ba0:	b0 91 b4 1a 	lds	r27, 0x1AB4	; 0x801ab4 <timers+0x1>
    1ba4:	10 97       	sbiw	r26, 0x00	; 0
    1ba6:	91 f1       	breq	.+100    	; 0x1c0c <SYS_TimerStop+0x74>
    1ba8:	a8 17       	cp	r26, r24
    1baa:	b9 07       	cpc	r27, r25
    1bac:	51 f5       	brne	.+84     	; 0x1c02 <SYS_TimerStop+0x6a>
    1bae:	0a c0       	rjmp	.+20     	; 0x1bc4 <SYS_TimerStop+0x2c>
    1bb0:	8e 17       	cp	r24, r30
    1bb2:	9f 07       	cpc	r25, r31
    1bb4:	29 f5       	brne	.+74     	; 0x1c00 <SYS_TimerStop+0x68>
    1bb6:	10 97       	sbiw	r26, 0x00	; 0
    1bb8:	31 f0       	breq	.+12     	; 0x1bc6 <SYS_TimerStop+0x2e>
    1bba:	20 81       	ld	r18, Z
    1bbc:	31 81       	ldd	r19, Z+1	; 0x01
    1bbe:	2d 93       	st	X+, r18
    1bc0:	3c 93       	st	X, r19
    1bc2:	07 c0       	rjmp	.+14     	; 0x1bd2 <SYS_TimerStop+0x3a>
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	20 81       	ld	r18, Z
    1bc8:	31 81       	ldd	r19, Z+1	; 0x01
    1bca:	30 93 b4 1a 	sts	0x1AB4, r19	; 0x801ab4 <timers+0x1>
    1bce:	20 93 b3 1a 	sts	0x1AB3, r18	; 0x801ab3 <timers>
    1bd2:	01 90       	ld	r0, Z+
    1bd4:	f0 81       	ld	r31, Z
    1bd6:	e0 2d       	mov	r30, r0
    1bd8:	30 97       	sbiw	r30, 0x00	; 0
    1bda:	c1 f0       	breq	.+48     	; 0x1c0c <SYS_TimerStop+0x74>
    1bdc:	42 81       	ldd	r20, Z+2	; 0x02
    1bde:	53 81       	ldd	r21, Z+3	; 0x03
    1be0:	64 81       	ldd	r22, Z+4	; 0x04
    1be2:	75 81       	ldd	r23, Z+5	; 0x05
    1be4:	ec 01       	movw	r28, r24
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bea:	ac 81       	ldd	r26, Y+4	; 0x04
    1bec:	bd 81       	ldd	r27, Y+5	; 0x05
    1bee:	84 0f       	add	r24, r20
    1bf0:	95 1f       	adc	r25, r21
    1bf2:	a6 1f       	adc	r26, r22
    1bf4:	b7 1f       	adc	r27, r23
    1bf6:	82 83       	std	Z+2, r24	; 0x02
    1bf8:	93 83       	std	Z+3, r25	; 0x03
    1bfa:	a4 83       	std	Z+4, r26	; 0x04
    1bfc:	b5 83       	std	Z+5, r27	; 0x05
    1bfe:	06 c0       	rjmp	.+12     	; 0x1c0c <SYS_TimerStop+0x74>
    1c00:	df 01       	movw	r26, r30
    1c02:	ed 91       	ld	r30, X+
    1c04:	fc 91       	ld	r31, X
    1c06:	11 97       	sbiw	r26, 0x01	; 1
    1c08:	30 97       	sbiw	r30, 0x00	; 0
    1c0a:	91 f6       	brne	.-92     	; 0x1bb0 <SYS_TimerStop+0x18>
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	08 95       	ret

00001c12 <SYS_TimerStarted>:
    1c12:	e0 91 b3 1a 	lds	r30, 0x1AB3	; 0x801ab3 <timers>
    1c16:	f0 91 b4 1a 	lds	r31, 0x1AB4	; 0x801ab4 <timers+0x1>
    1c1a:	30 97       	sbiw	r30, 0x00	; 0
    1c1c:	71 f0       	breq	.+28     	; 0x1c3a <SYS_TimerStarted+0x28>
    1c1e:	e8 17       	cp	r30, r24
    1c20:	f9 07       	cpc	r31, r25
    1c22:	21 f4       	brne	.+8      	; 0x1c2c <SYS_TimerStarted+0x1a>
    1c24:	0c c0       	rjmp	.+24     	; 0x1c3e <SYS_TimerStarted+0x2c>
    1c26:	8e 17       	cp	r24, r30
    1c28:	9f 07       	cpc	r25, r31
    1c2a:	59 f0       	breq	.+22     	; 0x1c42 <SYS_TimerStarted+0x30>
    1c2c:	01 90       	ld	r0, Z+
    1c2e:	f0 81       	ld	r31, Z
    1c30:	e0 2d       	mov	r30, r0
    1c32:	30 97       	sbiw	r30, 0x00	; 0
    1c34:	c1 f7       	brne	.-16     	; 0x1c26 <SYS_TimerStarted+0x14>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	08 95       	ret
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	08 95       	ret
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	08 95       	ret
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	08 95       	ret

00001c46 <SYS_TimerStart>:
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	ec 01       	movw	r28, r24
    1c4c:	e2 df       	rcall	.-60     	; 0x1c12 <SYS_TimerStarted>
    1c4e:	81 11       	cpse	r24, r1
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <SYS_TimerStart+0x10>
    1c52:	ce 01       	movw	r24, r28
    1c54:	38 df       	rcall	.-400    	; 0x1ac6 <placeTimer>
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	08 95       	ret

00001c5c <SYS_TimerTaskHandler>:
    1c5c:	cf 92       	push	r12
    1c5e:	df 92       	push	r13
    1c60:	ef 92       	push	r14
    1c62:	ff 92       	push	r15
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	80 91 b6 1a 	lds	r24, 0x1AB6	; 0x801ab6 <halTimerIrqCount>
    1c6c:	88 23       	and	r24, r24
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <SYS_TimerTaskHandler+0x16>
    1c70:	59 c0       	rjmp	.+178    	; 0x1d24 <SYS_TimerTaskHandler+0xc8>
    1c72:	8f b7       	in	r24, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	c0 90 b6 1a 	lds	r12, 0x1AB6	; 0x801ab6 <halTimerIrqCount>
    1c7a:	10 92 b6 1a 	sts	0x1AB6, r1	; 0x801ab6 <halTimerIrqCount>
    1c7e:	8f bf       	out	0x3f, r24	; 63
    1c80:	d1 2c       	mov	r13, r1
    1c82:	e1 2c       	mov	r14, r1
    1c84:	f1 2c       	mov	r15, r1
    1c86:	cc 0c       	add	r12, r12
    1c88:	dd 1c       	adc	r13, r13
    1c8a:	ee 1c       	adc	r14, r14
    1c8c:	ff 1c       	adc	r15, r15
    1c8e:	d7 01       	movw	r26, r14
    1c90:	c6 01       	movw	r24, r12
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	aa 1f       	adc	r26, r26
    1c98:	bb 1f       	adc	r27, r27
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	aa 1f       	adc	r26, r26
    1ca0:	bb 1f       	adc	r27, r27
    1ca2:	c8 0e       	add	r12, r24
    1ca4:	d9 1e       	adc	r13, r25
    1ca6:	ea 1e       	adc	r14, r26
    1ca8:	fb 1e       	adc	r15, r27
    1caa:	c0 91 b3 1a 	lds	r28, 0x1AB3	; 0x801ab3 <timers>
    1cae:	d0 91 b4 1a 	lds	r29, 0x1AB4	; 0x801ab4 <timers+0x1>
    1cb2:	20 97       	sbiw	r28, 0x00	; 0
    1cb4:	b9 f1       	breq	.+110    	; 0x1d24 <SYS_TimerTaskHandler+0xc8>
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cba:	ac 81       	ldd	r26, Y+4	; 0x04
    1cbc:	bd 81       	ldd	r27, Y+5	; 0x05
    1cbe:	c8 16       	cp	r12, r24
    1cc0:	d9 06       	cpc	r13, r25
    1cc2:	ea 06       	cpc	r14, r26
    1cc4:	fb 06       	cpc	r15, r27
    1cc6:	10 f1       	brcs	.+68     	; 0x1d0c <SYS_TimerTaskHandler+0xb0>
    1cc8:	c8 1a       	sub	r12, r24
    1cca:	d9 0a       	sbc	r13, r25
    1ccc:	ea 0a       	sbc	r14, r26
    1cce:	fb 0a       	sbc	r15, r27
    1cd0:	88 81       	ld	r24, Y
    1cd2:	99 81       	ldd	r25, Y+1	; 0x01
    1cd4:	90 93 b4 1a 	sts	0x1AB4, r25	; 0x801ab4 <timers+0x1>
    1cd8:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <timers>
    1cdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cde:	81 30       	cpi	r24, 0x01	; 1
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <SYS_TimerTaskHandler+0x8a>
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	f0 de       	rcall	.-544    	; 0x1ac6 <placeTimer>
    1ce6:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ce8:	fc 85       	ldd	r31, Y+12	; 0x0c
    1cea:	ce 01       	movw	r24, r28
    1cec:	19 95       	eicall
    1cee:	c0 91 b3 1a 	lds	r28, 0x1AB3	; 0x801ab3 <timers>
    1cf2:	d0 91 b4 1a 	lds	r29, 0x1AB4	; 0x801ab4 <timers+0x1>
    1cf6:	20 97       	sbiw	r28, 0x00	; 0
    1cf8:	a9 f0       	breq	.+42     	; 0x1d24 <SYS_TimerTaskHandler+0xc8>
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfe:	ac 81       	ldd	r26, Y+4	; 0x04
    1d00:	bd 81       	ldd	r27, Y+5	; 0x05
    1d02:	c8 16       	cp	r12, r24
    1d04:	d9 06       	cpc	r13, r25
    1d06:	ea 06       	cpc	r14, r26
    1d08:	fb 06       	cpc	r15, r27
    1d0a:	f0 f6       	brcc	.-68     	; 0x1cc8 <SYS_TimerTaskHandler+0x6c>
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d10:	ac 81       	ldd	r26, Y+4	; 0x04
    1d12:	bd 81       	ldd	r27, Y+5	; 0x05
    1d14:	8c 19       	sub	r24, r12
    1d16:	9d 09       	sbc	r25, r13
    1d18:	ae 09       	sbc	r26, r14
    1d1a:	bf 09       	sbc	r27, r15
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
    1d1e:	9b 83       	std	Y+3, r25	; 0x03
    1d20:	ac 83       	std	Y+4, r26	; 0x04
    1d22:	bd 83       	std	Y+5, r27	; 0x05
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	df 90       	pop	r13
    1d2e:	cf 90       	pop	r12
    1d30:	08 95       	ret

00001d32 <__mulsi3>:
    1d32:	db 01       	movw	r26, r22
    1d34:	8f 93       	push	r24
    1d36:	9f 93       	push	r25
    1d38:	2d d0       	rcall	.+90     	; 0x1d94 <__muluhisi3>
    1d3a:	bf 91       	pop	r27
    1d3c:	af 91       	pop	r26
    1d3e:	a2 9f       	mul	r26, r18
    1d40:	80 0d       	add	r24, r0
    1d42:	91 1d       	adc	r25, r1
    1d44:	a3 9f       	mul	r26, r19
    1d46:	90 0d       	add	r25, r0
    1d48:	b2 9f       	mul	r27, r18
    1d4a:	90 0d       	add	r25, r0
    1d4c:	11 24       	eor	r1, r1
    1d4e:	08 95       	ret

00001d50 <__udivmodsi4>:
    1d50:	a1 e2       	ldi	r26, 0x21	; 33
    1d52:	1a 2e       	mov	r1, r26
    1d54:	aa 1b       	sub	r26, r26
    1d56:	bb 1b       	sub	r27, r27
    1d58:	fd 01       	movw	r30, r26
    1d5a:	0d c0       	rjmp	.+26     	; 0x1d76 <__udivmodsi4_ep>

00001d5c <__udivmodsi4_loop>:
    1d5c:	aa 1f       	adc	r26, r26
    1d5e:	bb 1f       	adc	r27, r27
    1d60:	ee 1f       	adc	r30, r30
    1d62:	ff 1f       	adc	r31, r31
    1d64:	a2 17       	cp	r26, r18
    1d66:	b3 07       	cpc	r27, r19
    1d68:	e4 07       	cpc	r30, r20
    1d6a:	f5 07       	cpc	r31, r21
    1d6c:	20 f0       	brcs	.+8      	; 0x1d76 <__udivmodsi4_ep>
    1d6e:	a2 1b       	sub	r26, r18
    1d70:	b3 0b       	sbc	r27, r19
    1d72:	e4 0b       	sbc	r30, r20
    1d74:	f5 0b       	sbc	r31, r21

00001d76 <__udivmodsi4_ep>:
    1d76:	66 1f       	adc	r22, r22
    1d78:	77 1f       	adc	r23, r23
    1d7a:	88 1f       	adc	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	1a 94       	dec	r1
    1d80:	69 f7       	brne	.-38     	; 0x1d5c <__udivmodsi4_loop>
    1d82:	60 95       	com	r22
    1d84:	70 95       	com	r23
    1d86:	80 95       	com	r24
    1d88:	90 95       	com	r25
    1d8a:	9b 01       	movw	r18, r22
    1d8c:	ac 01       	movw	r20, r24
    1d8e:	bd 01       	movw	r22, r26
    1d90:	cf 01       	movw	r24, r30
    1d92:	08 95       	ret

00001d94 <__muluhisi3>:
    1d94:	09 d0       	rcall	.+18     	; 0x1da8 <__umulhisi3>
    1d96:	a5 9f       	mul	r26, r21
    1d98:	90 0d       	add	r25, r0
    1d9a:	b4 9f       	mul	r27, r20
    1d9c:	90 0d       	add	r25, r0
    1d9e:	a4 9f       	mul	r26, r20
    1da0:	80 0d       	add	r24, r0
    1da2:	91 1d       	adc	r25, r1
    1da4:	11 24       	eor	r1, r1
    1da6:	08 95       	ret

00001da8 <__umulhisi3>:
    1da8:	a2 9f       	mul	r26, r18
    1daa:	b0 01       	movw	r22, r0
    1dac:	b3 9f       	mul	r27, r19
    1dae:	c0 01       	movw	r24, r0
    1db0:	a3 9f       	mul	r26, r19
    1db2:	70 0d       	add	r23, r0
    1db4:	81 1d       	adc	r24, r1
    1db6:	11 24       	eor	r1, r1
    1db8:	91 1d       	adc	r25, r1
    1dba:	b2 9f       	mul	r27, r18
    1dbc:	70 0d       	add	r23, r0
    1dbe:	81 1d       	adc	r24, r1
    1dc0:	11 24       	eor	r1, r1
    1dc2:	91 1d       	adc	r25, r1
    1dc4:	08 95       	ret

00001dc6 <do_rand>:
    1dc6:	8f 92       	push	r8
    1dc8:	9f 92       	push	r9
    1dca:	af 92       	push	r10
    1dcc:	bf 92       	push	r11
    1dce:	cf 92       	push	r12
    1dd0:	df 92       	push	r13
    1dd2:	ef 92       	push	r14
    1dd4:	ff 92       	push	r15
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	ec 01       	movw	r28, r24
    1ddc:	68 81       	ld	r22, Y
    1dde:	79 81       	ldd	r23, Y+1	; 0x01
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	9b 81       	ldd	r25, Y+3	; 0x03
    1de4:	61 15       	cp	r22, r1
    1de6:	71 05       	cpc	r23, r1
    1de8:	81 05       	cpc	r24, r1
    1dea:	91 05       	cpc	r25, r1
    1dec:	21 f4       	brne	.+8      	; 0x1df6 <do_rand+0x30>
    1dee:	64 e2       	ldi	r22, 0x24	; 36
    1df0:	79 ed       	ldi	r23, 0xD9	; 217
    1df2:	8b e5       	ldi	r24, 0x5B	; 91
    1df4:	97 e0       	ldi	r25, 0x07	; 7
    1df6:	2d e1       	ldi	r18, 0x1D	; 29
    1df8:	33 ef       	ldi	r19, 0xF3	; 243
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	01 d3       	rcall	.+1538   	; 0x2402 <__divmodsi4>
    1e00:	49 01       	movw	r8, r18
    1e02:	5a 01       	movw	r10, r20
    1e04:	9b 01       	movw	r18, r22
    1e06:	ac 01       	movw	r20, r24
    1e08:	a7 ea       	ldi	r26, 0xA7	; 167
    1e0a:	b1 e4       	ldi	r27, 0x41	; 65
    1e0c:	c3 df       	rcall	.-122    	; 0x1d94 <__muluhisi3>
    1e0e:	6b 01       	movw	r12, r22
    1e10:	7c 01       	movw	r14, r24
    1e12:	ac ee       	ldi	r26, 0xEC	; 236
    1e14:	b4 ef       	ldi	r27, 0xF4	; 244
    1e16:	a5 01       	movw	r20, r10
    1e18:	94 01       	movw	r18, r8
    1e1a:	11 d3       	rcall	.+1570   	; 0x243e <__mulohisi3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8c 0d       	add	r24, r12
    1e22:	9d 1d       	adc	r25, r13
    1e24:	ae 1d       	adc	r26, r14
    1e26:	bf 1d       	adc	r27, r15
    1e28:	b7 ff       	sbrs	r27, 7
    1e2a:	03 c0       	rjmp	.+6      	; 0x1e32 <do_rand+0x6c>
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	a1 09       	sbc	r26, r1
    1e30:	b0 48       	sbci	r27, 0x80	; 128
    1e32:	88 83       	st	Y, r24
    1e34:	99 83       	std	Y+1, r25	; 0x01
    1e36:	aa 83       	std	Y+2, r26	; 0x02
    1e38:	bb 83       	std	Y+3, r27	; 0x03
    1e3a:	9f 77       	andi	r25, 0x7F	; 127
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	ff 90       	pop	r15
    1e42:	ef 90       	pop	r14
    1e44:	df 90       	pop	r13
    1e46:	cf 90       	pop	r12
    1e48:	bf 90       	pop	r11
    1e4a:	af 90       	pop	r10
    1e4c:	9f 90       	pop	r9
    1e4e:	8f 90       	pop	r8
    1e50:	08 95       	ret

00001e52 <rand_r>:
    1e52:	b9 cf       	rjmp	.-142    	; 0x1dc6 <do_rand>

00001e54 <rand>:
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	92 e0       	ldi	r25, 0x02	; 2
    1e58:	b6 cf       	rjmp	.-148    	; 0x1dc6 <do_rand>

00001e5a <srand>:
    1e5a:	a0 e0       	ldi	r26, 0x00	; 0
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1e62:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1e66:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1e6a:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1e6e:	08 95       	ret

00001e70 <memcpy>:
    1e70:	fb 01       	movw	r30, r22
    1e72:	dc 01       	movw	r26, r24
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <memcpy+0xa>
    1e76:	01 90       	ld	r0, Z+
    1e78:	0d 92       	st	X+, r0
    1e7a:	41 50       	subi	r20, 0x01	; 1
    1e7c:	50 40       	sbci	r21, 0x00	; 0
    1e7e:	d8 f7       	brcc	.-10     	; 0x1e76 <memcpy+0x6>
    1e80:	08 95       	ret

00001e82 <printf>:
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	ae 01       	movw	r20, r28
    1e8c:	4a 5f       	subi	r20, 0xFA	; 250
    1e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e90:	fa 01       	movw	r30, r20
    1e92:	61 91       	ld	r22, Z+
    1e94:	71 91       	ld	r23, Z+
    1e96:	af 01       	movw	r20, r30
    1e98:	80 91 e1 1a 	lds	r24, 0x1AE1	; 0x801ae1 <__iob+0x2>
    1e9c:	90 91 e2 1a 	lds	r25, 0x1AE2	; 0x801ae2 <__iob+0x3>
    1ea0:	03 d0       	rcall	.+6      	; 0x1ea8 <vfprintf>
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	08 95       	ret

00001ea8 <vfprintf>:
    1ea8:	2f 92       	push	r2
    1eaa:	3f 92       	push	r3
    1eac:	4f 92       	push	r4
    1eae:	5f 92       	push	r5
    1eb0:	6f 92       	push	r6
    1eb2:	7f 92       	push	r7
    1eb4:	8f 92       	push	r8
    1eb6:	9f 92       	push	r9
    1eb8:	af 92       	push	r10
    1eba:	bf 92       	push	r11
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	2b 97       	sbiw	r28, 0x0b	; 11
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	6c 01       	movw	r12, r24
    1ede:	7b 01       	movw	r14, r22
    1ee0:	8a 01       	movw	r16, r20
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	17 82       	std	Z+7, r1	; 0x07
    1ee6:	16 82       	std	Z+6, r1	; 0x06
    1ee8:	83 81       	ldd	r24, Z+3	; 0x03
    1eea:	81 ff       	sbrs	r24, 1
    1eec:	bf c1       	rjmp	.+894    	; 0x226c <__EEPROM_REGION_LENGTH__+0x26c>
    1eee:	ce 01       	movw	r24, r28
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	3c 01       	movw	r6, r24
    1ef4:	f6 01       	movw	r30, r12
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	f7 01       	movw	r30, r14
    1efa:	93 fd       	sbrc	r25, 3
    1efc:	85 91       	lpm	r24, Z+
    1efe:	93 ff       	sbrs	r25, 3
    1f00:	81 91       	ld	r24, Z+
    1f02:	7f 01       	movw	r14, r30
    1f04:	88 23       	and	r24, r24
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <vfprintf+0x62>
    1f08:	ad c1       	rjmp	.+858    	; 0x2264 <__EEPROM_REGION_LENGTH__+0x264>
    1f0a:	85 32       	cpi	r24, 0x25	; 37
    1f0c:	39 f4       	brne	.+14     	; 0x1f1c <vfprintf+0x74>
    1f0e:	93 fd       	sbrc	r25, 3
    1f10:	85 91       	lpm	r24, Z+
    1f12:	93 ff       	sbrs	r25, 3
    1f14:	81 91       	ld	r24, Z+
    1f16:	7f 01       	movw	r14, r30
    1f18:	85 32       	cpi	r24, 0x25	; 37
    1f1a:	21 f4       	brne	.+8      	; 0x1f24 <vfprintf+0x7c>
    1f1c:	b6 01       	movw	r22, r12
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	d6 d1       	rcall	.+940    	; 0x22ce <fputc>
    1f22:	e8 cf       	rjmp	.-48     	; 0x1ef4 <vfprintf+0x4c>
    1f24:	91 2c       	mov	r9, r1
    1f26:	21 2c       	mov	r2, r1
    1f28:	31 2c       	mov	r3, r1
    1f2a:	ff e1       	ldi	r31, 0x1F	; 31
    1f2c:	f3 15       	cp	r31, r3
    1f2e:	d8 f0       	brcs	.+54     	; 0x1f66 <vfprintf+0xbe>
    1f30:	8b 32       	cpi	r24, 0x2B	; 43
    1f32:	79 f0       	breq	.+30     	; 0x1f52 <vfprintf+0xaa>
    1f34:	38 f4       	brcc	.+14     	; 0x1f44 <vfprintf+0x9c>
    1f36:	80 32       	cpi	r24, 0x20	; 32
    1f38:	79 f0       	breq	.+30     	; 0x1f58 <vfprintf+0xb0>
    1f3a:	83 32       	cpi	r24, 0x23	; 35
    1f3c:	a1 f4       	brne	.+40     	; 0x1f66 <vfprintf+0xbe>
    1f3e:	23 2d       	mov	r18, r3
    1f40:	20 61       	ori	r18, 0x10	; 16
    1f42:	1d c0       	rjmp	.+58     	; 0x1f7e <vfprintf+0xd6>
    1f44:	8d 32       	cpi	r24, 0x2D	; 45
    1f46:	61 f0       	breq	.+24     	; 0x1f60 <vfprintf+0xb8>
    1f48:	80 33       	cpi	r24, 0x30	; 48
    1f4a:	69 f4       	brne	.+26     	; 0x1f66 <vfprintf+0xbe>
    1f4c:	23 2d       	mov	r18, r3
    1f4e:	21 60       	ori	r18, 0x01	; 1
    1f50:	16 c0       	rjmp	.+44     	; 0x1f7e <vfprintf+0xd6>
    1f52:	83 2d       	mov	r24, r3
    1f54:	82 60       	ori	r24, 0x02	; 2
    1f56:	38 2e       	mov	r3, r24
    1f58:	e3 2d       	mov	r30, r3
    1f5a:	e4 60       	ori	r30, 0x04	; 4
    1f5c:	3e 2e       	mov	r3, r30
    1f5e:	2a c0       	rjmp	.+84     	; 0x1fb4 <vfprintf+0x10c>
    1f60:	f3 2d       	mov	r31, r3
    1f62:	f8 60       	ori	r31, 0x08	; 8
    1f64:	1d c0       	rjmp	.+58     	; 0x1fa0 <vfprintf+0xf8>
    1f66:	37 fc       	sbrc	r3, 7
    1f68:	2d c0       	rjmp	.+90     	; 0x1fc4 <vfprintf+0x11c>
    1f6a:	20 ed       	ldi	r18, 0xD0	; 208
    1f6c:	28 0f       	add	r18, r24
    1f6e:	2a 30       	cpi	r18, 0x0A	; 10
    1f70:	40 f0       	brcs	.+16     	; 0x1f82 <vfprintf+0xda>
    1f72:	8e 32       	cpi	r24, 0x2E	; 46
    1f74:	b9 f4       	brne	.+46     	; 0x1fa4 <vfprintf+0xfc>
    1f76:	36 fc       	sbrc	r3, 6
    1f78:	75 c1       	rjmp	.+746    	; 0x2264 <__EEPROM_REGION_LENGTH__+0x264>
    1f7a:	23 2d       	mov	r18, r3
    1f7c:	20 64       	ori	r18, 0x40	; 64
    1f7e:	32 2e       	mov	r3, r18
    1f80:	19 c0       	rjmp	.+50     	; 0x1fb4 <vfprintf+0x10c>
    1f82:	36 fe       	sbrs	r3, 6
    1f84:	06 c0       	rjmp	.+12     	; 0x1f92 <vfprintf+0xea>
    1f86:	8a e0       	ldi	r24, 0x0A	; 10
    1f88:	98 9e       	mul	r9, r24
    1f8a:	20 0d       	add	r18, r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	92 2e       	mov	r9, r18
    1f90:	11 c0       	rjmp	.+34     	; 0x1fb4 <vfprintf+0x10c>
    1f92:	ea e0       	ldi	r30, 0x0A	; 10
    1f94:	2e 9e       	mul	r2, r30
    1f96:	20 0d       	add	r18, r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	22 2e       	mov	r2, r18
    1f9c:	f3 2d       	mov	r31, r3
    1f9e:	f0 62       	ori	r31, 0x20	; 32
    1fa0:	3f 2e       	mov	r3, r31
    1fa2:	08 c0       	rjmp	.+16     	; 0x1fb4 <vfprintf+0x10c>
    1fa4:	8c 36       	cpi	r24, 0x6C	; 108
    1fa6:	21 f4       	brne	.+8      	; 0x1fb0 <vfprintf+0x108>
    1fa8:	83 2d       	mov	r24, r3
    1faa:	80 68       	ori	r24, 0x80	; 128
    1fac:	38 2e       	mov	r3, r24
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <vfprintf+0x10c>
    1fb0:	88 36       	cpi	r24, 0x68	; 104
    1fb2:	41 f4       	brne	.+16     	; 0x1fc4 <vfprintf+0x11c>
    1fb4:	f7 01       	movw	r30, r14
    1fb6:	93 fd       	sbrc	r25, 3
    1fb8:	85 91       	lpm	r24, Z+
    1fba:	93 ff       	sbrs	r25, 3
    1fbc:	81 91       	ld	r24, Z+
    1fbe:	7f 01       	movw	r14, r30
    1fc0:	81 11       	cpse	r24, r1
    1fc2:	b3 cf       	rjmp	.-154    	; 0x1f2a <vfprintf+0x82>
    1fc4:	98 2f       	mov	r25, r24
    1fc6:	9f 7d       	andi	r25, 0xDF	; 223
    1fc8:	95 54       	subi	r25, 0x45	; 69
    1fca:	93 30       	cpi	r25, 0x03	; 3
    1fcc:	28 f4       	brcc	.+10     	; 0x1fd8 <vfprintf+0x130>
    1fce:	0c 5f       	subi	r16, 0xFC	; 252
    1fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd2:	9f e3       	ldi	r25, 0x3F	; 63
    1fd4:	99 83       	std	Y+1, r25	; 0x01
    1fd6:	0d c0       	rjmp	.+26     	; 0x1ff2 <vfprintf+0x14a>
    1fd8:	83 36       	cpi	r24, 0x63	; 99
    1fda:	31 f0       	breq	.+12     	; 0x1fe8 <vfprintf+0x140>
    1fdc:	83 37       	cpi	r24, 0x73	; 115
    1fde:	71 f0       	breq	.+28     	; 0x1ffc <vfprintf+0x154>
    1fe0:	83 35       	cpi	r24, 0x53	; 83
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <vfprintf+0x13e>
    1fe4:	55 c0       	rjmp	.+170    	; 0x2090 <__EEPROM_REGION_LENGTH__+0x90>
    1fe6:	20 c0       	rjmp	.+64     	; 0x2028 <__EEPROM_REGION_LENGTH__+0x28>
    1fe8:	f8 01       	movw	r30, r16
    1fea:	80 81       	ld	r24, Z
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	0e 5f       	subi	r16, 0xFE	; 254
    1ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff2:	88 24       	eor	r8, r8
    1ff4:	83 94       	inc	r8
    1ff6:	91 2c       	mov	r9, r1
    1ff8:	53 01       	movw	r10, r6
    1ffa:	12 c0       	rjmp	.+36     	; 0x2020 <__EEPROM_REGION_LENGTH__+0x20>
    1ffc:	28 01       	movw	r4, r16
    1ffe:	f2 e0       	ldi	r31, 0x02	; 2
    2000:	4f 0e       	add	r4, r31
    2002:	51 1c       	adc	r5, r1
    2004:	f8 01       	movw	r30, r16
    2006:	a0 80       	ld	r10, Z
    2008:	b1 80       	ldd	r11, Z+1	; 0x01
    200a:	36 fe       	sbrs	r3, 6
    200c:	03 c0       	rjmp	.+6      	; 0x2014 <__EEPROM_REGION_LENGTH__+0x14>
    200e:	69 2d       	mov	r22, r9
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <__EEPROM_REGION_LENGTH__+0x18>
    2014:	6f ef       	ldi	r22, 0xFF	; 255
    2016:	7f ef       	ldi	r23, 0xFF	; 255
    2018:	c5 01       	movw	r24, r10
    201a:	4e d1       	rcall	.+668    	; 0x22b8 <strnlen>
    201c:	4c 01       	movw	r8, r24
    201e:	82 01       	movw	r16, r4
    2020:	f3 2d       	mov	r31, r3
    2022:	ff 77       	andi	r31, 0x7F	; 127
    2024:	3f 2e       	mov	r3, r31
    2026:	15 c0       	rjmp	.+42     	; 0x2052 <__EEPROM_REGION_LENGTH__+0x52>
    2028:	28 01       	movw	r4, r16
    202a:	22 e0       	ldi	r18, 0x02	; 2
    202c:	42 0e       	add	r4, r18
    202e:	51 1c       	adc	r5, r1
    2030:	f8 01       	movw	r30, r16
    2032:	a0 80       	ld	r10, Z
    2034:	b1 80       	ldd	r11, Z+1	; 0x01
    2036:	36 fe       	sbrs	r3, 6
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <__EEPROM_REGION_LENGTH__+0x40>
    203a:	69 2d       	mov	r22, r9
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <__EEPROM_REGION_LENGTH__+0x44>
    2040:	6f ef       	ldi	r22, 0xFF	; 255
    2042:	7f ef       	ldi	r23, 0xFF	; 255
    2044:	c5 01       	movw	r24, r10
    2046:	2d d1       	rcall	.+602    	; 0x22a2 <strnlen_P>
    2048:	4c 01       	movw	r8, r24
    204a:	f3 2d       	mov	r31, r3
    204c:	f0 68       	ori	r31, 0x80	; 128
    204e:	3f 2e       	mov	r3, r31
    2050:	82 01       	movw	r16, r4
    2052:	33 fc       	sbrc	r3, 3
    2054:	19 c0       	rjmp	.+50     	; 0x2088 <__EEPROM_REGION_LENGTH__+0x88>
    2056:	82 2d       	mov	r24, r2
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	88 16       	cp	r8, r24
    205c:	99 06       	cpc	r9, r25
    205e:	a0 f4       	brcc	.+40     	; 0x2088 <__EEPROM_REGION_LENGTH__+0x88>
    2060:	b6 01       	movw	r22, r12
    2062:	80 e2       	ldi	r24, 0x20	; 32
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	33 d1       	rcall	.+614    	; 0x22ce <fputc>
    2068:	2a 94       	dec	r2
    206a:	f5 cf       	rjmp	.-22     	; 0x2056 <__EEPROM_REGION_LENGTH__+0x56>
    206c:	f5 01       	movw	r30, r10
    206e:	37 fc       	sbrc	r3, 7
    2070:	85 91       	lpm	r24, Z+
    2072:	37 fe       	sbrs	r3, 7
    2074:	81 91       	ld	r24, Z+
    2076:	5f 01       	movw	r10, r30
    2078:	b6 01       	movw	r22, r12
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	28 d1       	rcall	.+592    	; 0x22ce <fputc>
    207e:	21 10       	cpse	r2, r1
    2080:	2a 94       	dec	r2
    2082:	21 e0       	ldi	r18, 0x01	; 1
    2084:	82 1a       	sub	r8, r18
    2086:	91 08       	sbc	r9, r1
    2088:	81 14       	cp	r8, r1
    208a:	91 04       	cpc	r9, r1
    208c:	79 f7       	brne	.-34     	; 0x206c <__EEPROM_REGION_LENGTH__+0x6c>
    208e:	e1 c0       	rjmp	.+450    	; 0x2252 <__EEPROM_REGION_LENGTH__+0x252>
    2090:	84 36       	cpi	r24, 0x64	; 100
    2092:	11 f0       	breq	.+4      	; 0x2098 <__EEPROM_REGION_LENGTH__+0x98>
    2094:	89 36       	cpi	r24, 0x69	; 105
    2096:	39 f5       	brne	.+78     	; 0x20e6 <__EEPROM_REGION_LENGTH__+0xe6>
    2098:	f8 01       	movw	r30, r16
    209a:	37 fe       	sbrs	r3, 7
    209c:	07 c0       	rjmp	.+14     	; 0x20ac <__EEPROM_REGION_LENGTH__+0xac>
    209e:	60 81       	ld	r22, Z
    20a0:	71 81       	ldd	r23, Z+1	; 0x01
    20a2:	82 81       	ldd	r24, Z+2	; 0x02
    20a4:	93 81       	ldd	r25, Z+3	; 0x03
    20a6:	0c 5f       	subi	r16, 0xFC	; 252
    20a8:	1f 4f       	sbci	r17, 0xFF	; 255
    20aa:	08 c0       	rjmp	.+16     	; 0x20bc <__EEPROM_REGION_LENGTH__+0xbc>
    20ac:	60 81       	ld	r22, Z
    20ae:	71 81       	ldd	r23, Z+1	; 0x01
    20b0:	07 2e       	mov	r0, r23
    20b2:	00 0c       	add	r0, r0
    20b4:	88 0b       	sbc	r24, r24
    20b6:	99 0b       	sbc	r25, r25
    20b8:	0e 5f       	subi	r16, 0xFE	; 254
    20ba:	1f 4f       	sbci	r17, 0xFF	; 255
    20bc:	f3 2d       	mov	r31, r3
    20be:	ff 76       	andi	r31, 0x6F	; 111
    20c0:	3f 2e       	mov	r3, r31
    20c2:	97 ff       	sbrs	r25, 7
    20c4:	09 c0       	rjmp	.+18     	; 0x20d8 <__EEPROM_REGION_LENGTH__+0xd8>
    20c6:	90 95       	com	r25
    20c8:	80 95       	com	r24
    20ca:	70 95       	com	r23
    20cc:	61 95       	neg	r22
    20ce:	7f 4f       	sbci	r23, 0xFF	; 255
    20d0:	8f 4f       	sbci	r24, 0xFF	; 255
    20d2:	9f 4f       	sbci	r25, 0xFF	; 255
    20d4:	f0 68       	ori	r31, 0x80	; 128
    20d6:	3f 2e       	mov	r3, r31
    20d8:	2a e0       	ldi	r18, 0x0A	; 10
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	a3 01       	movw	r20, r6
    20de:	33 d1       	rcall	.+614    	; 0x2346 <__ultoa_invert>
    20e0:	88 2e       	mov	r8, r24
    20e2:	86 18       	sub	r8, r6
    20e4:	44 c0       	rjmp	.+136    	; 0x216e <__EEPROM_REGION_LENGTH__+0x16e>
    20e6:	85 37       	cpi	r24, 0x75	; 117
    20e8:	31 f4       	brne	.+12     	; 0x20f6 <__EEPROM_REGION_LENGTH__+0xf6>
    20ea:	23 2d       	mov	r18, r3
    20ec:	2f 7e       	andi	r18, 0xEF	; 239
    20ee:	b2 2e       	mov	r11, r18
    20f0:	2a e0       	ldi	r18, 0x0A	; 10
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	25 c0       	rjmp	.+74     	; 0x2140 <__EEPROM_REGION_LENGTH__+0x140>
    20f6:	93 2d       	mov	r25, r3
    20f8:	99 7f       	andi	r25, 0xF9	; 249
    20fa:	b9 2e       	mov	r11, r25
    20fc:	8f 36       	cpi	r24, 0x6F	; 111
    20fe:	c1 f0       	breq	.+48     	; 0x2130 <__EEPROM_REGION_LENGTH__+0x130>
    2100:	18 f4       	brcc	.+6      	; 0x2108 <__EEPROM_REGION_LENGTH__+0x108>
    2102:	88 35       	cpi	r24, 0x58	; 88
    2104:	79 f0       	breq	.+30     	; 0x2124 <__EEPROM_REGION_LENGTH__+0x124>
    2106:	ae c0       	rjmp	.+348    	; 0x2264 <__EEPROM_REGION_LENGTH__+0x264>
    2108:	80 37       	cpi	r24, 0x70	; 112
    210a:	19 f0       	breq	.+6      	; 0x2112 <__EEPROM_REGION_LENGTH__+0x112>
    210c:	88 37       	cpi	r24, 0x78	; 120
    210e:	21 f0       	breq	.+8      	; 0x2118 <__EEPROM_REGION_LENGTH__+0x118>
    2110:	a9 c0       	rjmp	.+338    	; 0x2264 <__EEPROM_REGION_LENGTH__+0x264>
    2112:	e9 2f       	mov	r30, r25
    2114:	e0 61       	ori	r30, 0x10	; 16
    2116:	be 2e       	mov	r11, r30
    2118:	b4 fe       	sbrs	r11, 4
    211a:	0d c0       	rjmp	.+26     	; 0x2136 <__EEPROM_REGION_LENGTH__+0x136>
    211c:	fb 2d       	mov	r31, r11
    211e:	f4 60       	ori	r31, 0x04	; 4
    2120:	bf 2e       	mov	r11, r31
    2122:	09 c0       	rjmp	.+18     	; 0x2136 <__EEPROM_REGION_LENGTH__+0x136>
    2124:	34 fe       	sbrs	r3, 4
    2126:	0a c0       	rjmp	.+20     	; 0x213c <__EEPROM_REGION_LENGTH__+0x13c>
    2128:	29 2f       	mov	r18, r25
    212a:	26 60       	ori	r18, 0x06	; 6
    212c:	b2 2e       	mov	r11, r18
    212e:	06 c0       	rjmp	.+12     	; 0x213c <__EEPROM_REGION_LENGTH__+0x13c>
    2130:	28 e0       	ldi	r18, 0x08	; 8
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	05 c0       	rjmp	.+10     	; 0x2140 <__EEPROM_REGION_LENGTH__+0x140>
    2136:	20 e1       	ldi	r18, 0x10	; 16
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <__EEPROM_REGION_LENGTH__+0x140>
    213c:	20 e1       	ldi	r18, 0x10	; 16
    213e:	32 e0       	ldi	r19, 0x02	; 2
    2140:	f8 01       	movw	r30, r16
    2142:	b7 fe       	sbrs	r11, 7
    2144:	07 c0       	rjmp	.+14     	; 0x2154 <__EEPROM_REGION_LENGTH__+0x154>
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	0c 5f       	subi	r16, 0xFC	; 252
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
    2152:	06 c0       	rjmp	.+12     	; 0x2160 <__EEPROM_REGION_LENGTH__+0x160>
    2154:	60 81       	ld	r22, Z
    2156:	71 81       	ldd	r23, Z+1	; 0x01
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 5f       	subi	r16, 0xFE	; 254
    215e:	1f 4f       	sbci	r17, 0xFF	; 255
    2160:	a3 01       	movw	r20, r6
    2162:	f1 d0       	rcall	.+482    	; 0x2346 <__ultoa_invert>
    2164:	88 2e       	mov	r8, r24
    2166:	86 18       	sub	r8, r6
    2168:	fb 2d       	mov	r31, r11
    216a:	ff 77       	andi	r31, 0x7F	; 127
    216c:	3f 2e       	mov	r3, r31
    216e:	36 fe       	sbrs	r3, 6
    2170:	0d c0       	rjmp	.+26     	; 0x218c <__EEPROM_REGION_LENGTH__+0x18c>
    2172:	23 2d       	mov	r18, r3
    2174:	2e 7f       	andi	r18, 0xFE	; 254
    2176:	a2 2e       	mov	r10, r18
    2178:	89 14       	cp	r8, r9
    217a:	58 f4       	brcc	.+22     	; 0x2192 <__EEPROM_REGION_LENGTH__+0x192>
    217c:	34 fe       	sbrs	r3, 4
    217e:	0b c0       	rjmp	.+22     	; 0x2196 <__EEPROM_REGION_LENGTH__+0x196>
    2180:	32 fc       	sbrc	r3, 2
    2182:	09 c0       	rjmp	.+18     	; 0x2196 <__EEPROM_REGION_LENGTH__+0x196>
    2184:	83 2d       	mov	r24, r3
    2186:	8e 7e       	andi	r24, 0xEE	; 238
    2188:	a8 2e       	mov	r10, r24
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <__EEPROM_REGION_LENGTH__+0x196>
    218c:	b8 2c       	mov	r11, r8
    218e:	a3 2c       	mov	r10, r3
    2190:	03 c0       	rjmp	.+6      	; 0x2198 <__EEPROM_REGION_LENGTH__+0x198>
    2192:	b8 2c       	mov	r11, r8
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <__EEPROM_REGION_LENGTH__+0x198>
    2196:	b9 2c       	mov	r11, r9
    2198:	a4 fe       	sbrs	r10, 4
    219a:	0f c0       	rjmp	.+30     	; 0x21ba <__EEPROM_REGION_LENGTH__+0x1ba>
    219c:	fe 01       	movw	r30, r28
    219e:	e8 0d       	add	r30, r8
    21a0:	f1 1d       	adc	r31, r1
    21a2:	80 81       	ld	r24, Z
    21a4:	80 33       	cpi	r24, 0x30	; 48
    21a6:	21 f4       	brne	.+8      	; 0x21b0 <__EEPROM_REGION_LENGTH__+0x1b0>
    21a8:	9a 2d       	mov	r25, r10
    21aa:	99 7e       	andi	r25, 0xE9	; 233
    21ac:	a9 2e       	mov	r10, r25
    21ae:	09 c0       	rjmp	.+18     	; 0x21c2 <__EEPROM_REGION_LENGTH__+0x1c2>
    21b0:	a2 fe       	sbrs	r10, 2
    21b2:	06 c0       	rjmp	.+12     	; 0x21c0 <__EEPROM_REGION_LENGTH__+0x1c0>
    21b4:	b3 94       	inc	r11
    21b6:	b3 94       	inc	r11
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <__EEPROM_REGION_LENGTH__+0x1c2>
    21ba:	8a 2d       	mov	r24, r10
    21bc:	86 78       	andi	r24, 0x86	; 134
    21be:	09 f0       	breq	.+2      	; 0x21c2 <__EEPROM_REGION_LENGTH__+0x1c2>
    21c0:	b3 94       	inc	r11
    21c2:	a3 fc       	sbrc	r10, 3
    21c4:	10 c0       	rjmp	.+32     	; 0x21e6 <__EEPROM_REGION_LENGTH__+0x1e6>
    21c6:	a0 fe       	sbrs	r10, 0
    21c8:	06 c0       	rjmp	.+12     	; 0x21d6 <__EEPROM_REGION_LENGTH__+0x1d6>
    21ca:	b2 14       	cp	r11, r2
    21cc:	80 f4       	brcc	.+32     	; 0x21ee <__EEPROM_REGION_LENGTH__+0x1ee>
    21ce:	28 0c       	add	r2, r8
    21d0:	92 2c       	mov	r9, r2
    21d2:	9b 18       	sub	r9, r11
    21d4:	0d c0       	rjmp	.+26     	; 0x21f0 <__EEPROM_REGION_LENGTH__+0x1f0>
    21d6:	b2 14       	cp	r11, r2
    21d8:	58 f4       	brcc	.+22     	; 0x21f0 <__EEPROM_REGION_LENGTH__+0x1f0>
    21da:	b6 01       	movw	r22, r12
    21dc:	80 e2       	ldi	r24, 0x20	; 32
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	76 d0       	rcall	.+236    	; 0x22ce <fputc>
    21e2:	b3 94       	inc	r11
    21e4:	f8 cf       	rjmp	.-16     	; 0x21d6 <__EEPROM_REGION_LENGTH__+0x1d6>
    21e6:	b2 14       	cp	r11, r2
    21e8:	18 f4       	brcc	.+6      	; 0x21f0 <__EEPROM_REGION_LENGTH__+0x1f0>
    21ea:	2b 18       	sub	r2, r11
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <__EEPROM_REGION_LENGTH__+0x1f2>
    21ee:	98 2c       	mov	r9, r8
    21f0:	21 2c       	mov	r2, r1
    21f2:	a4 fe       	sbrs	r10, 4
    21f4:	0f c0       	rjmp	.+30     	; 0x2214 <__EEPROM_REGION_LENGTH__+0x214>
    21f6:	b6 01       	movw	r22, r12
    21f8:	80 e3       	ldi	r24, 0x30	; 48
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	68 d0       	rcall	.+208    	; 0x22ce <fputc>
    21fe:	a2 fe       	sbrs	r10, 2
    2200:	16 c0       	rjmp	.+44     	; 0x222e <__EEPROM_REGION_LENGTH__+0x22e>
    2202:	a1 fc       	sbrc	r10, 1
    2204:	03 c0       	rjmp	.+6      	; 0x220c <__EEPROM_REGION_LENGTH__+0x20c>
    2206:	88 e7       	ldi	r24, 0x78	; 120
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <__EEPROM_REGION_LENGTH__+0x210>
    220c:	88 e5       	ldi	r24, 0x58	; 88
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	b6 01       	movw	r22, r12
    2212:	0c c0       	rjmp	.+24     	; 0x222c <__EEPROM_REGION_LENGTH__+0x22c>
    2214:	8a 2d       	mov	r24, r10
    2216:	86 78       	andi	r24, 0x86	; 134
    2218:	51 f0       	breq	.+20     	; 0x222e <__EEPROM_REGION_LENGTH__+0x22e>
    221a:	a1 fe       	sbrs	r10, 1
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <__EEPROM_REGION_LENGTH__+0x222>
    221e:	8b e2       	ldi	r24, 0x2B	; 43
    2220:	01 c0       	rjmp	.+2      	; 0x2224 <__EEPROM_REGION_LENGTH__+0x224>
    2222:	80 e2       	ldi	r24, 0x20	; 32
    2224:	a7 fc       	sbrc	r10, 7
    2226:	8d e2       	ldi	r24, 0x2D	; 45
    2228:	b6 01       	movw	r22, r12
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	50 d0       	rcall	.+160    	; 0x22ce <fputc>
    222e:	89 14       	cp	r8, r9
    2230:	30 f4       	brcc	.+12     	; 0x223e <__EEPROM_REGION_LENGTH__+0x23e>
    2232:	b6 01       	movw	r22, r12
    2234:	80 e3       	ldi	r24, 0x30	; 48
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	4a d0       	rcall	.+148    	; 0x22ce <fputc>
    223a:	9a 94       	dec	r9
    223c:	f8 cf       	rjmp	.-16     	; 0x222e <__EEPROM_REGION_LENGTH__+0x22e>
    223e:	8a 94       	dec	r8
    2240:	f3 01       	movw	r30, r6
    2242:	e8 0d       	add	r30, r8
    2244:	f1 1d       	adc	r31, r1
    2246:	80 81       	ld	r24, Z
    2248:	b6 01       	movw	r22, r12
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	40 d0       	rcall	.+128    	; 0x22ce <fputc>
    224e:	81 10       	cpse	r8, r1
    2250:	f6 cf       	rjmp	.-20     	; 0x223e <__EEPROM_REGION_LENGTH__+0x23e>
    2252:	22 20       	and	r2, r2
    2254:	09 f4       	brne	.+2      	; 0x2258 <__EEPROM_REGION_LENGTH__+0x258>
    2256:	4e ce       	rjmp	.-868    	; 0x1ef4 <vfprintf+0x4c>
    2258:	b6 01       	movw	r22, r12
    225a:	80 e2       	ldi	r24, 0x20	; 32
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	37 d0       	rcall	.+110    	; 0x22ce <fputc>
    2260:	2a 94       	dec	r2
    2262:	f7 cf       	rjmp	.-18     	; 0x2252 <__EEPROM_REGION_LENGTH__+0x252>
    2264:	f6 01       	movw	r30, r12
    2266:	86 81       	ldd	r24, Z+6	; 0x06
    2268:	97 81       	ldd	r25, Z+7	; 0x07
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <__EEPROM_REGION_LENGTH__+0x270>
    226c:	8f ef       	ldi	r24, 0xFF	; 255
    226e:	9f ef       	ldi	r25, 0xFF	; 255
    2270:	2b 96       	adiw	r28, 0x0b	; 11
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	1f 91       	pop	r17
    2282:	0f 91       	pop	r16
    2284:	ff 90       	pop	r15
    2286:	ef 90       	pop	r14
    2288:	df 90       	pop	r13
    228a:	cf 90       	pop	r12
    228c:	bf 90       	pop	r11
    228e:	af 90       	pop	r10
    2290:	9f 90       	pop	r9
    2292:	8f 90       	pop	r8
    2294:	7f 90       	pop	r7
    2296:	6f 90       	pop	r6
    2298:	5f 90       	pop	r5
    229a:	4f 90       	pop	r4
    229c:	3f 90       	pop	r3
    229e:	2f 90       	pop	r2
    22a0:	08 95       	ret

000022a2 <strnlen_P>:
    22a2:	fc 01       	movw	r30, r24
    22a4:	05 90       	lpm	r0, Z+
    22a6:	61 50       	subi	r22, 0x01	; 1
    22a8:	70 40       	sbci	r23, 0x00	; 0
    22aa:	01 10       	cpse	r0, r1
    22ac:	d8 f7       	brcc	.-10     	; 0x22a4 <strnlen_P+0x2>
    22ae:	80 95       	com	r24
    22b0:	90 95       	com	r25
    22b2:	8e 0f       	add	r24, r30
    22b4:	9f 1f       	adc	r25, r31
    22b6:	08 95       	ret

000022b8 <strnlen>:
    22b8:	fc 01       	movw	r30, r24
    22ba:	61 50       	subi	r22, 0x01	; 1
    22bc:	70 40       	sbci	r23, 0x00	; 0
    22be:	01 90       	ld	r0, Z+
    22c0:	01 10       	cpse	r0, r1
    22c2:	d8 f7       	brcc	.-10     	; 0x22ba <strnlen+0x2>
    22c4:	80 95       	com	r24
    22c6:	90 95       	com	r25
    22c8:	8e 0f       	add	r24, r30
    22ca:	9f 1f       	adc	r25, r31
    22cc:	08 95       	ret

000022ce <fputc>:
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	fb 01       	movw	r30, r22
    22d8:	23 81       	ldd	r18, Z+3	; 0x03
    22da:	21 fd       	sbrc	r18, 1
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <fputc+0x16>
    22de:	8f ef       	ldi	r24, 0xFF	; 255
    22e0:	9f ef       	ldi	r25, 0xFF	; 255
    22e2:	2c c0       	rjmp	.+88     	; 0x233c <fputc+0x6e>
    22e4:	22 ff       	sbrs	r18, 2
    22e6:	16 c0       	rjmp	.+44     	; 0x2314 <fputc+0x46>
    22e8:	46 81       	ldd	r20, Z+6	; 0x06
    22ea:	57 81       	ldd	r21, Z+7	; 0x07
    22ec:	24 81       	ldd	r18, Z+4	; 0x04
    22ee:	35 81       	ldd	r19, Z+5	; 0x05
    22f0:	42 17       	cp	r20, r18
    22f2:	53 07       	cpc	r21, r19
    22f4:	44 f4       	brge	.+16     	; 0x2306 <fputc+0x38>
    22f6:	a0 81       	ld	r26, Z
    22f8:	b1 81       	ldd	r27, Z+1	; 0x01
    22fa:	9d 01       	movw	r18, r26
    22fc:	2f 5f       	subi	r18, 0xFF	; 255
    22fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2300:	31 83       	std	Z+1, r19	; 0x01
    2302:	20 83       	st	Z, r18
    2304:	8c 93       	st	X, r24
    2306:	26 81       	ldd	r18, Z+6	; 0x06
    2308:	37 81       	ldd	r19, Z+7	; 0x07
    230a:	2f 5f       	subi	r18, 0xFF	; 255
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	37 83       	std	Z+7, r19	; 0x07
    2310:	26 83       	std	Z+6, r18	; 0x06
    2312:	14 c0       	rjmp	.+40     	; 0x233c <fputc+0x6e>
    2314:	8b 01       	movw	r16, r22
    2316:	ec 01       	movw	r28, r24
    2318:	fb 01       	movw	r30, r22
    231a:	00 84       	ldd	r0, Z+8	; 0x08
    231c:	f1 85       	ldd	r31, Z+9	; 0x09
    231e:	e0 2d       	mov	r30, r0
    2320:	19 95       	eicall
    2322:	89 2b       	or	r24, r25
    2324:	e1 f6       	brne	.-72     	; 0x22de <fputc+0x10>
    2326:	d8 01       	movw	r26, r16
    2328:	16 96       	adiw	r26, 0x06	; 6
    232a:	8d 91       	ld	r24, X+
    232c:	9c 91       	ld	r25, X
    232e:	17 97       	sbiw	r26, 0x07	; 7
    2330:	01 96       	adiw	r24, 0x01	; 1
    2332:	17 96       	adiw	r26, 0x07	; 7
    2334:	9c 93       	st	X, r25
    2336:	8e 93       	st	-X, r24
    2338:	16 97       	sbiw	r26, 0x06	; 6
    233a:	ce 01       	movw	r24, r28
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	08 95       	ret

00002346 <__ultoa_invert>:
    2346:	fa 01       	movw	r30, r20
    2348:	aa 27       	eor	r26, r26
    234a:	28 30       	cpi	r18, 0x08	; 8
    234c:	51 f1       	breq	.+84     	; 0x23a2 <__ultoa_invert+0x5c>
    234e:	20 31       	cpi	r18, 0x10	; 16
    2350:	81 f1       	breq	.+96     	; 0x23b2 <__ultoa_invert+0x6c>
    2352:	e8 94       	clt
    2354:	6f 93       	push	r22
    2356:	6e 7f       	andi	r22, 0xFE	; 254
    2358:	6e 5f       	subi	r22, 0xFE	; 254
    235a:	7f 4f       	sbci	r23, 0xFF	; 255
    235c:	8f 4f       	sbci	r24, 0xFF	; 255
    235e:	9f 4f       	sbci	r25, 0xFF	; 255
    2360:	af 4f       	sbci	r26, 0xFF	; 255
    2362:	b1 e0       	ldi	r27, 0x01	; 1
    2364:	3e d0       	rcall	.+124    	; 0x23e2 <__ultoa_invert+0x9c>
    2366:	b4 e0       	ldi	r27, 0x04	; 4
    2368:	3c d0       	rcall	.+120    	; 0x23e2 <__ultoa_invert+0x9c>
    236a:	67 0f       	add	r22, r23
    236c:	78 1f       	adc	r23, r24
    236e:	89 1f       	adc	r24, r25
    2370:	9a 1f       	adc	r25, r26
    2372:	a1 1d       	adc	r26, r1
    2374:	68 0f       	add	r22, r24
    2376:	79 1f       	adc	r23, r25
    2378:	8a 1f       	adc	r24, r26
    237a:	91 1d       	adc	r25, r1
    237c:	a1 1d       	adc	r26, r1
    237e:	6a 0f       	add	r22, r26
    2380:	71 1d       	adc	r23, r1
    2382:	81 1d       	adc	r24, r1
    2384:	91 1d       	adc	r25, r1
    2386:	a1 1d       	adc	r26, r1
    2388:	20 d0       	rcall	.+64     	; 0x23ca <__ultoa_invert+0x84>
    238a:	09 f4       	brne	.+2      	; 0x238e <__ultoa_invert+0x48>
    238c:	68 94       	set
    238e:	3f 91       	pop	r19
    2390:	2a e0       	ldi	r18, 0x0A	; 10
    2392:	26 9f       	mul	r18, r22
    2394:	11 24       	eor	r1, r1
    2396:	30 19       	sub	r19, r0
    2398:	30 5d       	subi	r19, 0xD0	; 208
    239a:	31 93       	st	Z+, r19
    239c:	de f6       	brtc	.-74     	; 0x2354 <__ultoa_invert+0xe>
    239e:	cf 01       	movw	r24, r30
    23a0:	08 95       	ret
    23a2:	46 2f       	mov	r20, r22
    23a4:	47 70       	andi	r20, 0x07	; 7
    23a6:	40 5d       	subi	r20, 0xD0	; 208
    23a8:	41 93       	st	Z+, r20
    23aa:	b3 e0       	ldi	r27, 0x03	; 3
    23ac:	0f d0       	rcall	.+30     	; 0x23cc <__ultoa_invert+0x86>
    23ae:	c9 f7       	brne	.-14     	; 0x23a2 <__ultoa_invert+0x5c>
    23b0:	f6 cf       	rjmp	.-20     	; 0x239e <__ultoa_invert+0x58>
    23b2:	46 2f       	mov	r20, r22
    23b4:	4f 70       	andi	r20, 0x0F	; 15
    23b6:	40 5d       	subi	r20, 0xD0	; 208
    23b8:	4a 33       	cpi	r20, 0x3A	; 58
    23ba:	18 f0       	brcs	.+6      	; 0x23c2 <__ultoa_invert+0x7c>
    23bc:	49 5d       	subi	r20, 0xD9	; 217
    23be:	31 fd       	sbrc	r19, 1
    23c0:	40 52       	subi	r20, 0x20	; 32
    23c2:	41 93       	st	Z+, r20
    23c4:	02 d0       	rcall	.+4      	; 0x23ca <__ultoa_invert+0x84>
    23c6:	a9 f7       	brne	.-22     	; 0x23b2 <__ultoa_invert+0x6c>
    23c8:	ea cf       	rjmp	.-44     	; 0x239e <__ultoa_invert+0x58>
    23ca:	b4 e0       	ldi	r27, 0x04	; 4
    23cc:	a6 95       	lsr	r26
    23ce:	97 95       	ror	r25
    23d0:	87 95       	ror	r24
    23d2:	77 95       	ror	r23
    23d4:	67 95       	ror	r22
    23d6:	ba 95       	dec	r27
    23d8:	c9 f7       	brne	.-14     	; 0x23cc <__ultoa_invert+0x86>
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	61 05       	cpc	r22, r1
    23de:	71 05       	cpc	r23, r1
    23e0:	08 95       	ret
    23e2:	9b 01       	movw	r18, r22
    23e4:	ac 01       	movw	r20, r24
    23e6:	0a 2e       	mov	r0, r26
    23e8:	06 94       	lsr	r0
    23ea:	57 95       	ror	r21
    23ec:	47 95       	ror	r20
    23ee:	37 95       	ror	r19
    23f0:	27 95       	ror	r18
    23f2:	ba 95       	dec	r27
    23f4:	c9 f7       	brne	.-14     	; 0x23e8 <__ultoa_invert+0xa2>
    23f6:	62 0f       	add	r22, r18
    23f8:	73 1f       	adc	r23, r19
    23fa:	84 1f       	adc	r24, r20
    23fc:	95 1f       	adc	r25, r21
    23fe:	a0 1d       	adc	r26, r0
    2400:	08 95       	ret

00002402 <__divmodsi4>:
    2402:	05 2e       	mov	r0, r21
    2404:	97 fb       	bst	r25, 7
    2406:	16 f4       	brtc	.+4      	; 0x240c <__divmodsi4+0xa>
    2408:	00 94       	com	r0
    240a:	0f d0       	rcall	.+30     	; 0x242a <__negsi2>
    240c:	57 fd       	sbrc	r21, 7
    240e:	05 d0       	rcall	.+10     	; 0x241a <__divmodsi4_neg2>
    2410:	9f dc       	rcall	.-1730   	; 0x1d50 <__udivmodsi4>
    2412:	07 fc       	sbrc	r0, 7
    2414:	02 d0       	rcall	.+4      	; 0x241a <__divmodsi4_neg2>
    2416:	46 f4       	brtc	.+16     	; 0x2428 <__divmodsi4_exit>
    2418:	08 c0       	rjmp	.+16     	; 0x242a <__negsi2>

0000241a <__divmodsi4_neg2>:
    241a:	50 95       	com	r21
    241c:	40 95       	com	r20
    241e:	30 95       	com	r19
    2420:	21 95       	neg	r18
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	4f 4f       	sbci	r20, 0xFF	; 255
    2426:	5f 4f       	sbci	r21, 0xFF	; 255

00002428 <__divmodsi4_exit>:
    2428:	08 95       	ret

0000242a <__negsi2>:
    242a:	90 95       	com	r25
    242c:	80 95       	com	r24
    242e:	70 95       	com	r23
    2430:	61 95       	neg	r22
    2432:	7f 4f       	sbci	r23, 0xFF	; 255
    2434:	8f 4f       	sbci	r24, 0xFF	; 255
    2436:	9f 4f       	sbci	r25, 0xFF	; 255
    2438:	08 95       	ret

0000243a <__mulshisi3>:
    243a:	b7 ff       	sbrs	r27, 7
    243c:	ab cc       	rjmp	.-1706   	; 0x1d94 <__muluhisi3>

0000243e <__mulohisi3>:
    243e:	aa dc       	rcall	.-1708   	; 0x1d94 <__muluhisi3>
    2440:	82 1b       	sub	r24, r18
    2442:	93 0b       	sbc	r25, r19
    2444:	08 95       	ret

00002446 <_exit>:
    2446:	f8 94       	cli

00002448 <__stop_program>:
    2448:	ff cf       	rjmp	.-2      	; 0x2448 <__stop_program>
